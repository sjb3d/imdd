#pragma once

#include "imdd_draw_util.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
	How many buffer copies do we need to be able to prepare shapes for
	rendering without affecting data still in use by the GPU.  Typically
	can be left at 2 for applications that allow at most 1 frame of
	overlap between CPU and GPU.
*/
#define IMDD_VULKAN_FRAME_COUNT				2

/*
	How many descriptor copies do we need to be able prepare draw calls
	for rendering without affecting data still in use by the GPU.

	Can be set to IMDD_VULKAN_FRAME_COUNT if each set of shapes is only
	drawn once, or a multiple if shapes are expected to be drawn
	multiple times per frame (e.g. for stereo 3D).
*/
#define IMDD_VULKAN_DESCRIPTOR_COUNT		(2*IMDD_VULKAN_FRAME_COUNT)

#define IMDD_VULKAN_SET_ZERO(NAME)			memset(&NAME, 0, sizeof(NAME))

typedef enum {
	IMDD_VULKAN_DRAW_TYPE_INSTANCE,
	IMDD_VULKAN_DRAW_TYPE_ARRAY,
	IMDD_VULKAN_DRAW_TYPE_COUNT		// keep last
} imdd_vulkan_draw_type_enum_t;

#define IMDD_VULKAN_PIPELINE_COUNT			(IMDD_VULKAN_DRAW_TYPE_COUNT*IMDD_STYLE_COUNT*IMDD_ZMODE_COUNT*IMDD_BLEND_COUNT)

typedef void (* imdd_vulkan_verify_fn_t)(VkResult);

typedef struct imdd_vulkan_fp_t {
	PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties;
	PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties;

	PFN_vkCreateShaderModule vkCreateShaderModule;
	PFN_vkCreateDescriptorSetLayout vkCreateDescriptorSetLayout;
	PFN_vkCreatePipelineLayout vkCreatePipelineLayout;
	PFN_vkCreateGraphicsPipelines vkCreateGraphicsPipelines;

	PFN_vkAllocateMemory vkAllocateMemory;
	PFN_vkMapMemory vkMapMemory;
	PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges;
	PFN_vkCreateBuffer vkCreateBuffer;
	PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements;
	PFN_vkBindBufferMemory vkBindBufferMemory;

	PFN_vkCreateDescriptorPool vkCreateDescriptorPool;
	PFN_vkAllocateDescriptorSets vkAllocateDescriptorSets;
	PFN_vkUpdateDescriptorSets vkUpdateDescriptorSets;

	PFN_vkCmdCopyBuffer vkCmdCopyBuffer;
	PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier;
	PFN_vkCmdBindPipeline vkCmdBindPipeline;
	PFN_vkCmdBindDescriptorSets vkCmdBindDescriptorSets;
	PFN_vkCmdBindVertexBuffers vkCmdBindVertexBuffers;
	PFN_vkCmdBindIndexBuffer vkCmdBindIndexBuffer;
	PFN_vkCmdDraw vkCmdDraw;
	PFN_vkCmdDrawIndexed vkCmdDrawIndexed;
} imdd_vulkan_fp_t;

typedef struct imdd_vulkan_mesh_buffer_t {
	imdd_mesh_layout_t layout;
	VkDeviceSize vertex_buffer_size;
	VkDeviceSize index_buffer_size;

	VkBuffer vertex_staging_buffer;
	VkDeviceSize vertex_staging_offset;
	VkBuffer index_staging_buffer;
	VkDeviceSize index_staging_offset;

	VkBuffer vertex_buffer;
	VkDeviceSize vertex_offset;
	VkBuffer index_buffer;
	VkDeviceSize index_offset;
} imdd_vulkan_mesh_buffer_t;

typedef struct imdd_vulkan_frame_t {
	VkBuffer instance_transform_buffer;
	VkDeviceSize instance_transform_offset;
	imdd_instance_transform_t *instance_transform_base;

	VkBuffer instance_color_buffer;
	VkDeviceSize instance_color_offset;
	imdd_instance_color_t *instance_color_base;

	VkBuffer filled_vertex_buffer;
	VkDeviceSize filled_vertex_offset;
	imdd_array_filled_vertex_t *filled_vertex_base;

	VkBuffer wire_vertex_buffer;
	VkDeviceSize wire_vertex_offset;
	imdd_array_wire_vertex_t *wire_vertex_base;
} imdd_vulkan_frame_t;

typedef struct imdd_vulkan_descriptor_t {
	VkBuffer common_uniform_buffer;
	VkDeviceSize common_uniform_offset;
	VkDescriptorSet common_descriptor_set;
	void *common_uniform_base;
} imdd_vulkan_descriptor_t;

#define IMDD_VULKAN_FLAG_MULTIVIEW		(1 << 0)

typedef struct imdd_vulkan_context_t {
	imdd_vulkan_fp_t fp;
	imdd_vulkan_verify_fn_t verify_fn;
	uint32_t flags;
	uint32_t instance_capacity;
	uint32_t filled_vertex_capacity;
	uint32_t wire_vertex_capacity;
	VkDeviceSize atom_size;

	VkShaderModule instance_filled_vert;
	VkShaderModule instance_wire_vert;
	VkShaderModule array_filled_vert;
	VkShaderModule array_wire_vert;
	VkShaderModule filled_frag;
	VkShaderModule wire_frag;
	VkDescriptorSetLayout common_descriptor_set_layout;
	VkPipelineLayout common_pipeline_layout;

	VkDescriptorPool descriptor_pool;
	VkPipeline pipelines[IMDD_VULKAN_PIPELINE_COUNT];

	imdd_vulkan_mesh_buffer_t mesh_buffers[IMDD_STYLE_COUNT];
	VkDeviceMemory device_memory;
	uint32_t mesh_copy_done;

	imdd_vulkan_frame_t frames[IMDD_VULKAN_FRAME_COUNT];
	uint32_t frame_index;
	imdd_vulkan_descriptor_t descriptors[IMDD_VULKAN_DESCRIPTOR_COUNT];
	uint32_t descriptor_index;
	VkDeviceMemory host_memory;
	void *host_memory_base;

	imdd_batch_t instance_batches[IMDD_INSTANCE_BATCH_COUNT];
	imdd_batch_t filled_array_batches[IMDD_ARRAY_BATCH_COUNT];
	imdd_batch_t wire_array_batches[IMDD_ARRAY_BATCH_COUNT];
} imdd_vulkan_context_t;

/*
#version 430 core

#ifdef MULTIVIEW
#extension GL_OVR_multiview2 : enable
#define VIEW_COUNT  2
#define VIEW_INDEX  gl_ViewID_OVR
#else
#define VIEW_COUNT  1
#define VIEW_INDEX  0
#endif

layout (location = 0) in vec4 a_world0;
layout (location = 1) in vec4 a_world1;
layout (location = 2) in vec4 a_world2;
layout (location = 3) in vec4 a_col;
layout (location = 4) in vec3 a_pos_ls;
layout (location = 5) in vec3 a_normal_ls;

layout(set = 0, binding = 0) uniform common_t {
	mat4 proj_from_world[VIEW_COUNT];
} g_common;

out gl_PerVertex {
	vec4 gl_Position;
};
layout(location = 0) out vec3 v_nvec_ws;
layout(location = 1) out vec4 v_col;

void main(void)
{
	mat4x3 world_from_local = transpose(mat3x4(a_world0, a_world1, a_world2));
	vec3 pos_ws = world_from_local*vec4(a_pos_ls, 1.0);

	mat3 bivec_world_from_local = inverse(transpose(mat3(world_from_local)));
	vec3 nvec_ws = bivec_world_from_local*a_normal_ls;

	gl_Position = g_common.proj_from_world[VIEW_INDEX]*vec4(pos_ws, 1.0);
	v_nvec_ws = nvec_ws;
	v_col = a_col;
}
*/
static uint32_t const g_imdd_vulkan_spv_instance_filled_vert[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x0000005e,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x000e000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x0000000f,0x00000011,
	0x0000002b,0x0000003e,0x00000043,0x00000059,0x0000005b,0x0000005c,0x00030003,0x00000002,
	0x000001ae,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00070005,0x0000000a,0x6c726f77,
	0x72665f64,0x6c5f6d6f,0x6c61636f,0x00000000,0x00050005,0x0000000d,0x6f775f61,0x30646c72,
	0x00000000,0x00050005,0x0000000f,0x6f775f61,0x31646c72,0x00000000,0x00050005,0x00000011,
	0x6f775f61,0x32646c72,0x00000000,0x00040005,0x00000028,0x5f736f70,0x00007377,0x00050005,
	0x0000002b,0x6f705f61,0x736c5f73,0x00000000,0x00080005,0x00000034,0x65766962,0x6f775f63,
	0x5f646c72,0x6d6f7266,0x636f6c5f,0x00006c61,0x00040005,0x0000003c,0x6365766e,0x0073775f,
	0x00050005,0x0000003e,0x6f6e5f61,0x6c616d72,0x00736c5f,0x00060005,0x00000041,0x505f6c67,
	0x65567265,0x78657472,0x00000000,0x00060006,0x00000041,0x00000000,0x505f6c67,0x7469736f,
	0x006e6f69,0x00030005,0x00000043,0x00000000,0x00050005,0x0000004a,0x6d6d6f63,0x745f6e6f,
	0x00000000,0x00070006,0x0000004a,0x00000000,0x6a6f7270,0x6f72665f,0x6f775f6d,0x00646c72,
	0x00050005,0x0000004c,0x6f635f67,0x6e6f6d6d,0x00000000,0x00050005,0x00000059,0x766e5f76,
	0x775f6365,0x00000073,0x00040005,0x0000005b,0x6f635f76,0x0000006c,0x00040005,0x0000005c,
	0x6f635f61,0x0000006c,0x00040047,0x0000000d,0x0000001e,0x00000000,0x00040047,0x0000000f,
	0x0000001e,0x00000001,0x00040047,0x00000011,0x0000001e,0x00000002,0x00040047,0x0000002b,
	0x0000001e,0x00000004,0x00040047,0x0000003e,0x0000001e,0x00000005,0x00050048,0x00000041,
	0x00000000,0x0000000b,0x00000000,0x00030047,0x00000041,0x00000002,0x00040047,0x00000049,
	0x00000006,0x00000040,0x00040048,0x0000004a,0x00000000,0x00000005,0x00050048,0x0000004a,
	0x00000000,0x00000023,0x00000000,0x00050048,0x0000004a,0x00000000,0x00000007,0x00000010,
	0x00030047,0x0000004a,0x00000002,0x00040047,0x0000004c,0x00000022,0x00000000,0x00040047,
	0x0000004c,0x00000021,0x00000000,0x00040047,0x00000059,0x0000001e,0x00000000,0x00040047,
	0x0000005b,0x0000001e,0x00000001,0x00040047,0x0000005c,0x0000001e,0x00000003,0x00020013,
	0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,
	0x00000007,0x00000006,0x00000003,0x00040018,0x00000008,0x00000007,0x00000004,0x00040020,
	0x00000009,0x00000007,0x00000008,0x00040017,0x0000000b,0x00000006,0x00000004,0x00040020,
	0x0000000c,0x00000001,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000001,0x0004003b,
	0x0000000c,0x0000000f,0x00000001,0x0004003b,0x0000000c,0x00000011,0x00000001,0x00040018,
	0x00000013,0x0000000b,0x00000003,0x0004002b,0x00000006,0x00000014,0x3f800000,0x0004002b,
	0x00000006,0x00000015,0x00000000,0x00040020,0x00000027,0x00000007,0x00000007,0x00040020,
	0x0000002a,0x00000001,0x00000007,0x0004003b,0x0000002a,0x0000002b,0x00000001,0x00040018,
	0x00000032,0x00000007,0x00000003,0x00040020,0x00000033,0x00000007,0x00000032,0x0004003b,
	0x0000002a,0x0000003e,0x00000001,0x0003001e,0x00000041,0x0000000b,0x00040020,0x00000042,
	0x00000003,0x00000041,0x0004003b,0x00000042,0x00000043,0x00000003,0x00040015,0x00000044,
	0x00000020,0x00000001,0x0004002b,0x00000044,0x00000045,0x00000000,0x00040018,0x00000046,
	0x0000000b,0x00000004,0x00040015,0x00000047,0x00000020,0x00000000,0x0004002b,0x00000047,
	0x00000048,0x00000001,0x0004001c,0x00000049,0x00000046,0x00000048,0x0003001e,0x0000004a,
	0x00000049,0x00040020,0x0000004b,0x00000002,0x0000004a,0x0004003b,0x0000004b,0x0000004c,
	0x00000002,0x00040020,0x0000004d,0x00000002,0x00000046,0x00040020,0x00000056,0x00000003,
	0x0000000b,0x00040020,0x00000058,0x00000003,0x00000007,0x0004003b,0x00000058,0x00000059,
	0x00000003,0x0004003b,0x00000056,0x0000005b,0x00000003,0x0004003b,0x0000000c,0x0000005c,
	0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,
	0x0004003b,0x00000009,0x0000000a,0x00000007,0x0004003b,0x00000027,0x00000028,0x00000007,
	0x0004003b,0x00000033,0x00000034,0x00000007,0x0004003b,0x00000027,0x0000003c,0x00000007,
	0x0004003d,0x0000000b,0x0000000e,0x0000000d,0x0004003d,0x0000000b,0x00000010,0x0000000f,
	0x0004003d,0x0000000b,0x00000012,0x00000011,0x00050051,0x00000006,0x00000016,0x0000000e,
	0x00000000,0x00050051,0x00000006,0x00000017,0x0000000e,0x00000001,0x00050051,0x00000006,
	0x00000018,0x0000000e,0x00000002,0x00050051,0x00000006,0x00000019,0x0000000e,0x00000003,
	0x00050051,0x00000006,0x0000001a,0x00000010,0x00000000,0x00050051,0x00000006,0x0000001b,
	0x00000010,0x00000001,0x00050051,0x00000006,0x0000001c,0x00000010,0x00000002,0x00050051,
	0x00000006,0x0000001d,0x00000010,0x00000003,0x00050051,0x00000006,0x0000001e,0x00000012,
	0x00000000,0x00050051,0x00000006,0x0000001f,0x00000012,0x00000001,0x00050051,0x00000006,
	0x00000020,0x00000012,0x00000002,0x00050051,0x00000006,0x00000021,0x00000012,0x00000003,
	0x00070050,0x0000000b,0x00000022,0x00000016,0x00000017,0x00000018,0x00000019,0x00070050,
	0x0000000b,0x00000023,0x0000001a,0x0000001b,0x0000001c,0x0000001d,0x00070050,0x0000000b,
	0x00000024,0x0000001e,0x0000001f,0x00000020,0x00000021,0x00060050,0x00000013,0x00000025,
	0x00000022,0x00000023,0x00000024,0x00040054,0x00000008,0x00000026,0x00000025,0x0003003e,
	0x0000000a,0x00000026,0x0004003d,0x00000008,0x00000029,0x0000000a,0x0004003d,0x00000007,
	0x0000002c,0x0000002b,0x00050051,0x00000006,0x0000002d,0x0000002c,0x00000000,0x00050051,
	0x00000006,0x0000002e,0x0000002c,0x00000001,0x00050051,0x00000006,0x0000002f,0x0000002c,
	0x00000002,0x00070050,0x0000000b,0x00000030,0x0000002d,0x0000002e,0x0000002f,0x00000014,
	0x00050091,0x00000007,0x00000031,0x00000029,0x00000030,0x0003003e,0x00000028,0x00000031,
	0x0004003d,0x00000008,0x00000035,0x0000000a,0x00050051,0x00000007,0x00000036,0x00000035,
	0x00000000,0x00050051,0x00000007,0x00000037,0x00000035,0x00000001,0x00050051,0x00000007,
	0x00000038,0x00000035,0x00000002,0x00060050,0x00000032,0x00000039,0x00000036,0x00000037,
	0x00000038,0x00040054,0x00000032,0x0000003a,0x00000039,0x0006000c,0x00000032,0x0000003b,
	0x00000001,0x00000022,0x0000003a,0x0003003e,0x00000034,0x0000003b,0x0004003d,0x00000032,
	0x0000003d,0x00000034,0x0004003d,0x00000007,0x0000003f,0x0000003e,0x00050091,0x00000007,
	0x00000040,0x0000003d,0x0000003f,0x0003003e,0x0000003c,0x00000040,0x00060041,0x0000004d,
	0x0000004e,0x0000004c,0x00000045,0x00000045,0x0004003d,0x00000046,0x0000004f,0x0000004e,
	0x0004003d,0x00000007,0x00000050,0x00000028,0x00050051,0x00000006,0x00000051,0x00000050,
	0x00000000,0x00050051,0x00000006,0x00000052,0x00000050,0x00000001,0x00050051,0x00000006,
	0x00000053,0x00000050,0x00000002,0x00070050,0x0000000b,0x00000054,0x00000051,0x00000052,
	0x00000053,0x00000014,0x00050091,0x0000000b,0x00000055,0x0000004f,0x00000054,0x00050041,
	0x00000056,0x00000057,0x00000043,0x00000045,0x0003003e,0x00000057,0x00000055,0x0004003d,
	0x00000007,0x0000005a,0x0000003c,0x0003003e,0x00000059,0x0000005a,0x0004003d,0x0000000b,
	0x0000005d,0x0000005c,0x0003003e,0x0000005b,0x0000005d,0x000100fd,0x00010038
};
static uint32_t const g_imdd_vulkan_spv_instance_filled_mv_vert[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x00000061,0x00000000,0x00020011,0x00000001,0x00020011,
	0x00001157,0x0006000a,0x5f565053,0x5f52484b,0x746c756d,0x65697669,0x00000077,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x000f000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x0000000f,0x00000011,
	0x0000002b,0x0000003e,0x00000043,0x0000004e,0x0000005c,0x0000005e,0x0000005f,0x00030003,
	0x00000002,0x000001ae,0x00060004,0x4f5f4c47,0x6d5f5256,0x69746c75,0x77656976,0x00000032,
	0x00040005,0x00000004,0x6e69616d,0x00000000,0x00070005,0x0000000a,0x6c726f77,0x72665f64,
	0x6c5f6d6f,0x6c61636f,0x00000000,0x00050005,0x0000000d,0x6f775f61,0x30646c72,0x00000000,
	0x00050005,0x0000000f,0x6f775f61,0x31646c72,0x00000000,0x00050005,0x00000011,0x6f775f61,
	0x32646c72,0x00000000,0x00040005,0x00000028,0x5f736f70,0x00007377,0x00050005,0x0000002b,
	0x6f705f61,0x736c5f73,0x00000000,0x00080005,0x00000034,0x65766962,0x6f775f63,0x5f646c72,
	0x6d6f7266,0x636f6c5f,0x00006c61,0x00040005,0x0000003c,0x6365766e,0x0073775f,0x00050005,
	0x0000003e,0x6f6e5f61,0x6c616d72,0x00736c5f,0x00060005,0x00000041,0x505f6c67,0x65567265,
	0x78657472,0x00000000,0x00060006,0x00000041,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,
	0x00030005,0x00000043,0x00000000,0x00050005,0x0000004a,0x6d6d6f63,0x745f6e6f,0x00000000,
	0x00070006,0x0000004a,0x00000000,0x6a6f7270,0x6f72665f,0x6f775f6d,0x00646c72,0x00050005,
	0x0000004c,0x6f635f67,0x6e6f6d6d,0x00000000,0x00060005,0x0000004e,0x565f6c67,0x49776569,
	0x564f5f44,0x00000052,0x00050005,0x0000005c,0x766e5f76,0x775f6365,0x00000073,0x00040005,
	0x0000005e,0x6f635f76,0x0000006c,0x00040005,0x0000005f,0x6f635f61,0x0000006c,0x00040047,
	0x0000000d,0x0000001e,0x00000000,0x00040047,0x0000000f,0x0000001e,0x00000001,0x00040047,
	0x00000011,0x0000001e,0x00000002,0x00040047,0x0000002b,0x0000001e,0x00000004,0x00040047,
	0x0000003e,0x0000001e,0x00000005,0x00050048,0x00000041,0x00000000,0x0000000b,0x00000000,
	0x00030047,0x00000041,0x00000002,0x00040047,0x00000049,0x00000006,0x00000040,0x00040048,
	0x0000004a,0x00000000,0x00000005,0x00050048,0x0000004a,0x00000000,0x00000023,0x00000000,
	0x00050048,0x0000004a,0x00000000,0x00000007,0x00000010,0x00030047,0x0000004a,0x00000002,
	0x00040047,0x0000004c,0x00000022,0x00000000,0x00040047,0x0000004c,0x00000021,0x00000000,
	0x00040047,0x0000004e,0x0000000b,0x00001158,0x00040047,0x0000005c,0x0000001e,0x00000000,
	0x00040047,0x0000005e,0x0000001e,0x00000001,0x00040047,0x0000005f,0x0000001e,0x00000003,
	0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
	0x00040017,0x00000007,0x00000006,0x00000003,0x00040018,0x00000008,0x00000007,0x00000004,
	0x00040020,0x00000009,0x00000007,0x00000008,0x00040017,0x0000000b,0x00000006,0x00000004,
	0x00040020,0x0000000c,0x00000001,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000001,
	0x0004003b,0x0000000c,0x0000000f,0x00000001,0x0004003b,0x0000000c,0x00000011,0x00000001,
	0x00040018,0x00000013,0x0000000b,0x00000003,0x0004002b,0x00000006,0x00000014,0x3f800000,
	0x0004002b,0x00000006,0x00000015,0x00000000,0x00040020,0x00000027,0x00000007,0x00000007,
	0x00040020,0x0000002a,0x00000001,0x00000007,0x0004003b,0x0000002a,0x0000002b,0x00000001,
	0x00040018,0x00000032,0x00000007,0x00000003,0x00040020,0x00000033,0x00000007,0x00000032,
	0x0004003b,0x0000002a,0x0000003e,0x00000001,0x0003001e,0x00000041,0x0000000b,0x00040020,
	0x00000042,0x00000003,0x00000041,0x0004003b,0x00000042,0x00000043,0x00000003,0x00040015,
	0x00000044,0x00000020,0x00000001,0x0004002b,0x00000044,0x00000045,0x00000000,0x00040018,
	0x00000046,0x0000000b,0x00000004,0x00040015,0x00000047,0x00000020,0x00000000,0x0004002b,
	0x00000047,0x00000048,0x00000002,0x0004001c,0x00000049,0x00000046,0x00000048,0x0003001e,
	0x0000004a,0x00000049,0x00040020,0x0000004b,0x00000002,0x0000004a,0x0004003b,0x0000004b,
	0x0000004c,0x00000002,0x00040020,0x0000004d,0x00000001,0x00000047,0x0004003b,0x0000004d,
	0x0000004e,0x00000001,0x00040020,0x00000050,0x00000002,0x00000046,0x00040020,0x00000059,
	0x00000003,0x0000000b,0x00040020,0x0000005b,0x00000003,0x00000007,0x0004003b,0x0000005b,
	0x0000005c,0x00000003,0x0004003b,0x00000059,0x0000005e,0x00000003,0x0004003b,0x0000000c,
	0x0000005f,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,
	0x00000005,0x0004003b,0x00000009,0x0000000a,0x00000007,0x0004003b,0x00000027,0x00000028,
	0x00000007,0x0004003b,0x00000033,0x00000034,0x00000007,0x0004003b,0x00000027,0x0000003c,
	0x00000007,0x0004003d,0x0000000b,0x0000000e,0x0000000d,0x0004003d,0x0000000b,0x00000010,
	0x0000000f,0x0004003d,0x0000000b,0x00000012,0x00000011,0x00050051,0x00000006,0x00000016,
	0x0000000e,0x00000000,0x00050051,0x00000006,0x00000017,0x0000000e,0x00000001,0x00050051,
	0x00000006,0x00000018,0x0000000e,0x00000002,0x00050051,0x00000006,0x00000019,0x0000000e,
	0x00000003,0x00050051,0x00000006,0x0000001a,0x00000010,0x00000000,0x00050051,0x00000006,
	0x0000001b,0x00000010,0x00000001,0x00050051,0x00000006,0x0000001c,0x00000010,0x00000002,
	0x00050051,0x00000006,0x0000001d,0x00000010,0x00000003,0x00050051,0x00000006,0x0000001e,
	0x00000012,0x00000000,0x00050051,0x00000006,0x0000001f,0x00000012,0x00000001,0x00050051,
	0x00000006,0x00000020,0x00000012,0x00000002,0x00050051,0x00000006,0x00000021,0x00000012,
	0x00000003,0x00070050,0x0000000b,0x00000022,0x00000016,0x00000017,0x00000018,0x00000019,
	0x00070050,0x0000000b,0x00000023,0x0000001a,0x0000001b,0x0000001c,0x0000001d,0x00070050,
	0x0000000b,0x00000024,0x0000001e,0x0000001f,0x00000020,0x00000021,0x00060050,0x00000013,
	0x00000025,0x00000022,0x00000023,0x00000024,0x00040054,0x00000008,0x00000026,0x00000025,
	0x0003003e,0x0000000a,0x00000026,0x0004003d,0x00000008,0x00000029,0x0000000a,0x0004003d,
	0x00000007,0x0000002c,0x0000002b,0x00050051,0x00000006,0x0000002d,0x0000002c,0x00000000,
	0x00050051,0x00000006,0x0000002e,0x0000002c,0x00000001,0x00050051,0x00000006,0x0000002f,
	0x0000002c,0x00000002,0x00070050,0x0000000b,0x00000030,0x0000002d,0x0000002e,0x0000002f,
	0x00000014,0x00050091,0x00000007,0x00000031,0x00000029,0x00000030,0x0003003e,0x00000028,
	0x00000031,0x0004003d,0x00000008,0x00000035,0x0000000a,0x00050051,0x00000007,0x00000036,
	0x00000035,0x00000000,0x00050051,0x00000007,0x00000037,0x00000035,0x00000001,0x00050051,
	0x00000007,0x00000038,0x00000035,0x00000002,0x00060050,0x00000032,0x00000039,0x00000036,
	0x00000037,0x00000038,0x00040054,0x00000032,0x0000003a,0x00000039,0x0006000c,0x00000032,
	0x0000003b,0x00000001,0x00000022,0x0000003a,0x0003003e,0x00000034,0x0000003b,0x0004003d,
	0x00000032,0x0000003d,0x00000034,0x0004003d,0x00000007,0x0000003f,0x0000003e,0x00050091,
	0x00000007,0x00000040,0x0000003d,0x0000003f,0x0003003e,0x0000003c,0x00000040,0x0004003d,
	0x00000047,0x0000004f,0x0000004e,0x00060041,0x00000050,0x00000051,0x0000004c,0x00000045,
	0x0000004f,0x0004003d,0x00000046,0x00000052,0x00000051,0x0004003d,0x00000007,0x00000053,
	0x00000028,0x00050051,0x00000006,0x00000054,0x00000053,0x00000000,0x00050051,0x00000006,
	0x00000055,0x00000053,0x00000001,0x00050051,0x00000006,0x00000056,0x00000053,0x00000002,
	0x00070050,0x0000000b,0x00000057,0x00000054,0x00000055,0x00000056,0x00000014,0x00050091,
	0x0000000b,0x00000058,0x00000052,0x00000057,0x00050041,0x00000059,0x0000005a,0x00000043,
	0x00000045,0x0003003e,0x0000005a,0x00000058,0x0004003d,0x00000007,0x0000005d,0x0000003c,
	0x0003003e,0x0000005c,0x0000005d,0x0004003d,0x0000000b,0x00000060,0x0000005f,0x0003003e,
	0x0000005e,0x00000060,0x000100fd,0x00010038
};

/*
#version 430 core

#ifdef MULTIVIEW
#extension GL_OVR_multiview2 : enable
#define VIEW_COUNT  2
#define VIEW_INDEX  gl_ViewID_OVR
#else
#define VIEW_COUNT  1
#define VIEW_INDEX  0
#endif

layout (location = 0) in vec4 a_world0;
layout (location = 1) in vec4 a_world1;
layout (location = 2) in vec4 a_world2;
layout (location = 3) in vec4 a_col;
layout (location = 4) in vec3 a_pos_ls;

layout(set = 0, binding = 0) uniform common_t {
	mat4 proj_from_world[VIEW_COUNT];
} g_common;

out gl_PerVertex {
	vec4 gl_Position;
};
layout(location = 0) out vec4 v_col;

void main(void)
{
	mat4x3 world_from_local = transpose(mat3x4(a_world0, a_world1, a_world2));
	vec3 pos_ws = world_from_local*vec4(a_pos_ls, 1.0);

	gl_Position = g_common.proj_from_world[VIEW_INDEX]*vec4(pos_ws, 1.0);
	v_col = a_col;
}
*/
static uint32_t const g_imdd_vulkan_spv_instance_wire_vert[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x0000004c,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x000c000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x0000000f,0x00000011,
	0x0000002b,0x00000034,0x00000049,0x0000004a,0x00030003,0x00000002,0x000001ae,0x00040005,
	0x00000004,0x6e69616d,0x00000000,0x00070005,0x0000000a,0x6c726f77,0x72665f64,0x6c5f6d6f,
	0x6c61636f,0x00000000,0x00050005,0x0000000d,0x6f775f61,0x30646c72,0x00000000,0x00050005,
	0x0000000f,0x6f775f61,0x31646c72,0x00000000,0x00050005,0x00000011,0x6f775f61,0x32646c72,
	0x00000000,0x00040005,0x00000028,0x5f736f70,0x00007377,0x00050005,0x0000002b,0x6f705f61,
	0x736c5f73,0x00000000,0x00060005,0x00000032,0x505f6c67,0x65567265,0x78657472,0x00000000,
	0x00060006,0x00000032,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x00000034,
	0x00000000,0x00050005,0x0000003b,0x6d6d6f63,0x745f6e6f,0x00000000,0x00070006,0x0000003b,
	0x00000000,0x6a6f7270,0x6f72665f,0x6f775f6d,0x00646c72,0x00050005,0x0000003d,0x6f635f67,
	0x6e6f6d6d,0x00000000,0x00040005,0x00000049,0x6f635f76,0x0000006c,0x00040005,0x0000004a,
	0x6f635f61,0x0000006c,0x00040047,0x0000000d,0x0000001e,0x00000000,0x00040047,0x0000000f,
	0x0000001e,0x00000001,0x00040047,0x00000011,0x0000001e,0x00000002,0x00040047,0x0000002b,
	0x0000001e,0x00000004,0x00050048,0x00000032,0x00000000,0x0000000b,0x00000000,0x00030047,
	0x00000032,0x00000002,0x00040047,0x0000003a,0x00000006,0x00000040,0x00040048,0x0000003b,
	0x00000000,0x00000005,0x00050048,0x0000003b,0x00000000,0x00000023,0x00000000,0x00050048,
	0x0000003b,0x00000000,0x00000007,0x00000010,0x00030047,0x0000003b,0x00000002,0x00040047,
	0x0000003d,0x00000022,0x00000000,0x00040047,0x0000003d,0x00000021,0x00000000,0x00040047,
	0x00000049,0x0000001e,0x00000000,0x00040047,0x0000004a,0x0000001e,0x00000003,0x00020013,
	0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,
	0x00000007,0x00000006,0x00000003,0x00040018,0x00000008,0x00000007,0x00000004,0x00040020,
	0x00000009,0x00000007,0x00000008,0x00040017,0x0000000b,0x00000006,0x00000004,0x00040020,
	0x0000000c,0x00000001,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000001,0x0004003b,
	0x0000000c,0x0000000f,0x00000001,0x0004003b,0x0000000c,0x00000011,0x00000001,0x00040018,
	0x00000013,0x0000000b,0x00000003,0x0004002b,0x00000006,0x00000014,0x3f800000,0x0004002b,
	0x00000006,0x00000015,0x00000000,0x00040020,0x00000027,0x00000007,0x00000007,0x00040020,
	0x0000002a,0x00000001,0x00000007,0x0004003b,0x0000002a,0x0000002b,0x00000001,0x0003001e,
	0x00000032,0x0000000b,0x00040020,0x00000033,0x00000003,0x00000032,0x0004003b,0x00000033,
	0x00000034,0x00000003,0x00040015,0x00000035,0x00000020,0x00000001,0x0004002b,0x00000035,
	0x00000036,0x00000000,0x00040018,0x00000037,0x0000000b,0x00000004,0x00040015,0x00000038,
	0x00000020,0x00000000,0x0004002b,0x00000038,0x00000039,0x00000001,0x0004001c,0x0000003a,
	0x00000037,0x00000039,0x0003001e,0x0000003b,0x0000003a,0x00040020,0x0000003c,0x00000002,
	0x0000003b,0x0004003b,0x0000003c,0x0000003d,0x00000002,0x00040020,0x0000003e,0x00000002,
	0x00000037,0x00040020,0x00000047,0x00000003,0x0000000b,0x0004003b,0x00000047,0x00000049,
	0x00000003,0x0004003b,0x0000000c,0x0000004a,0x00000001,0x00050036,0x00000002,0x00000004,
	0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003b,0x00000009,0x0000000a,0x00000007,
	0x0004003b,0x00000027,0x00000028,0x00000007,0x0004003d,0x0000000b,0x0000000e,0x0000000d,
	0x0004003d,0x0000000b,0x00000010,0x0000000f,0x0004003d,0x0000000b,0x00000012,0x00000011,
	0x00050051,0x00000006,0x00000016,0x0000000e,0x00000000,0x00050051,0x00000006,0x00000017,
	0x0000000e,0x00000001,0x00050051,0x00000006,0x00000018,0x0000000e,0x00000002,0x00050051,
	0x00000006,0x00000019,0x0000000e,0x00000003,0x00050051,0x00000006,0x0000001a,0x00000010,
	0x00000000,0x00050051,0x00000006,0x0000001b,0x00000010,0x00000001,0x00050051,0x00000006,
	0x0000001c,0x00000010,0x00000002,0x00050051,0x00000006,0x0000001d,0x00000010,0x00000003,
	0x00050051,0x00000006,0x0000001e,0x00000012,0x00000000,0x00050051,0x00000006,0x0000001f,
	0x00000012,0x00000001,0x00050051,0x00000006,0x00000020,0x00000012,0x00000002,0x00050051,
	0x00000006,0x00000021,0x00000012,0x00000003,0x00070050,0x0000000b,0x00000022,0x00000016,
	0x00000017,0x00000018,0x00000019,0x00070050,0x0000000b,0x00000023,0x0000001a,0x0000001b,
	0x0000001c,0x0000001d,0x00070050,0x0000000b,0x00000024,0x0000001e,0x0000001f,0x00000020,
	0x00000021,0x00060050,0x00000013,0x00000025,0x00000022,0x00000023,0x00000024,0x00040054,
	0x00000008,0x00000026,0x00000025,0x0003003e,0x0000000a,0x00000026,0x0004003d,0x00000008,
	0x00000029,0x0000000a,0x0004003d,0x00000007,0x0000002c,0x0000002b,0x00050051,0x00000006,
	0x0000002d,0x0000002c,0x00000000,0x00050051,0x00000006,0x0000002e,0x0000002c,0x00000001,
	0x00050051,0x00000006,0x0000002f,0x0000002c,0x00000002,0x00070050,0x0000000b,0x00000030,
	0x0000002d,0x0000002e,0x0000002f,0x00000014,0x00050091,0x00000007,0x00000031,0x00000029,
	0x00000030,0x0003003e,0x00000028,0x00000031,0x00060041,0x0000003e,0x0000003f,0x0000003d,
	0x00000036,0x00000036,0x0004003d,0x00000037,0x00000040,0x0000003f,0x0004003d,0x00000007,
	0x00000041,0x00000028,0x00050051,0x00000006,0x00000042,0x00000041,0x00000000,0x00050051,
	0x00000006,0x00000043,0x00000041,0x00000001,0x00050051,0x00000006,0x00000044,0x00000041,
	0x00000002,0x00070050,0x0000000b,0x00000045,0x00000042,0x00000043,0x00000044,0x00000014,
	0x00050091,0x0000000b,0x00000046,0x00000040,0x00000045,0x00050041,0x00000047,0x00000048,
	0x00000034,0x00000036,0x0003003e,0x00000048,0x00000046,0x0004003d,0x0000000b,0x0000004b,
	0x0000004a,0x0003003e,0x00000049,0x0000004b,0x000100fd,0x00010038
};
static uint32_t const g_imdd_vulkan_spv_instance_wire_mv_vert[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x0000004f,0x00000000,0x00020011,0x00000001,0x00020011,
	0x00001157,0x0006000a,0x5f565053,0x5f52484b,0x746c756d,0x65697669,0x00000077,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x000d000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000d,0x0000000f,0x00000011,
	0x0000002b,0x00000034,0x0000003f,0x0000004c,0x0000004d,0x00030003,0x00000002,0x000001ae,
	0x00060004,0x4f5f4c47,0x6d5f5256,0x69746c75,0x77656976,0x00000032,0x00040005,0x00000004,
	0x6e69616d,0x00000000,0x00070005,0x0000000a,0x6c726f77,0x72665f64,0x6c5f6d6f,0x6c61636f,
	0x00000000,0x00050005,0x0000000d,0x6f775f61,0x30646c72,0x00000000,0x00050005,0x0000000f,
	0x6f775f61,0x31646c72,0x00000000,0x00050005,0x00000011,0x6f775f61,0x32646c72,0x00000000,
	0x00040005,0x00000028,0x5f736f70,0x00007377,0x00050005,0x0000002b,0x6f705f61,0x736c5f73,
	0x00000000,0x00060005,0x00000032,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,
	0x00000032,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x00000034,0x00000000,
	0x00050005,0x0000003b,0x6d6d6f63,0x745f6e6f,0x00000000,0x00070006,0x0000003b,0x00000000,
	0x6a6f7270,0x6f72665f,0x6f775f6d,0x00646c72,0x00050005,0x0000003d,0x6f635f67,0x6e6f6d6d,
	0x00000000,0x00060005,0x0000003f,0x565f6c67,0x49776569,0x564f5f44,0x00000052,0x00040005,
	0x0000004c,0x6f635f76,0x0000006c,0x00040005,0x0000004d,0x6f635f61,0x0000006c,0x00040047,
	0x0000000d,0x0000001e,0x00000000,0x00040047,0x0000000f,0x0000001e,0x00000001,0x00040047,
	0x00000011,0x0000001e,0x00000002,0x00040047,0x0000002b,0x0000001e,0x00000004,0x00050048,
	0x00000032,0x00000000,0x0000000b,0x00000000,0x00030047,0x00000032,0x00000002,0x00040047,
	0x0000003a,0x00000006,0x00000040,0x00040048,0x0000003b,0x00000000,0x00000005,0x00050048,
	0x0000003b,0x00000000,0x00000023,0x00000000,0x00050048,0x0000003b,0x00000000,0x00000007,
	0x00000010,0x00030047,0x0000003b,0x00000002,0x00040047,0x0000003d,0x00000022,0x00000000,
	0x00040047,0x0000003d,0x00000021,0x00000000,0x00040047,0x0000003f,0x0000000b,0x00001158,
	0x00040047,0x0000004c,0x0000001e,0x00000000,0x00040047,0x0000004d,0x0000001e,0x00000003,
	0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
	0x00040017,0x00000007,0x00000006,0x00000003,0x00040018,0x00000008,0x00000007,0x00000004,
	0x00040020,0x00000009,0x00000007,0x00000008,0x00040017,0x0000000b,0x00000006,0x00000004,
	0x00040020,0x0000000c,0x00000001,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000001,
	0x0004003b,0x0000000c,0x0000000f,0x00000001,0x0004003b,0x0000000c,0x00000011,0x00000001,
	0x00040018,0x00000013,0x0000000b,0x00000003,0x0004002b,0x00000006,0x00000014,0x3f800000,
	0x0004002b,0x00000006,0x00000015,0x00000000,0x00040020,0x00000027,0x00000007,0x00000007,
	0x00040020,0x0000002a,0x00000001,0x00000007,0x0004003b,0x0000002a,0x0000002b,0x00000001,
	0x0003001e,0x00000032,0x0000000b,0x00040020,0x00000033,0x00000003,0x00000032,0x0004003b,
	0x00000033,0x00000034,0x00000003,0x00040015,0x00000035,0x00000020,0x00000001,0x0004002b,
	0x00000035,0x00000036,0x00000000,0x00040018,0x00000037,0x0000000b,0x00000004,0x00040015,
	0x00000038,0x00000020,0x00000000,0x0004002b,0x00000038,0x00000039,0x00000002,0x0004001c,
	0x0000003a,0x00000037,0x00000039,0x0003001e,0x0000003b,0x0000003a,0x00040020,0x0000003c,
	0x00000002,0x0000003b,0x0004003b,0x0000003c,0x0000003d,0x00000002,0x00040020,0x0000003e,
	0x00000001,0x00000038,0x0004003b,0x0000003e,0x0000003f,0x00000001,0x00040020,0x00000041,
	0x00000002,0x00000037,0x00040020,0x0000004a,0x00000003,0x0000000b,0x0004003b,0x0000004a,
	0x0000004c,0x00000003,0x0004003b,0x0000000c,0x0000004d,0x00000001,0x00050036,0x00000002,
	0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003b,0x00000009,0x0000000a,
	0x00000007,0x0004003b,0x00000027,0x00000028,0x00000007,0x0004003d,0x0000000b,0x0000000e,
	0x0000000d,0x0004003d,0x0000000b,0x00000010,0x0000000f,0x0004003d,0x0000000b,0x00000012,
	0x00000011,0x00050051,0x00000006,0x00000016,0x0000000e,0x00000000,0x00050051,0x00000006,
	0x00000017,0x0000000e,0x00000001,0x00050051,0x00000006,0x00000018,0x0000000e,0x00000002,
	0x00050051,0x00000006,0x00000019,0x0000000e,0x00000003,0x00050051,0x00000006,0x0000001a,
	0x00000010,0x00000000,0x00050051,0x00000006,0x0000001b,0x00000010,0x00000001,0x00050051,
	0x00000006,0x0000001c,0x00000010,0x00000002,0x00050051,0x00000006,0x0000001d,0x00000010,
	0x00000003,0x00050051,0x00000006,0x0000001e,0x00000012,0x00000000,0x00050051,0x00000006,
	0x0000001f,0x00000012,0x00000001,0x00050051,0x00000006,0x00000020,0x00000012,0x00000002,
	0x00050051,0x00000006,0x00000021,0x00000012,0x00000003,0x00070050,0x0000000b,0x00000022,
	0x00000016,0x00000017,0x00000018,0x00000019,0x00070050,0x0000000b,0x00000023,0x0000001a,
	0x0000001b,0x0000001c,0x0000001d,0x00070050,0x0000000b,0x00000024,0x0000001e,0x0000001f,
	0x00000020,0x00000021,0x00060050,0x00000013,0x00000025,0x00000022,0x00000023,0x00000024,
	0x00040054,0x00000008,0x00000026,0x00000025,0x0003003e,0x0000000a,0x00000026,0x0004003d,
	0x00000008,0x00000029,0x0000000a,0x0004003d,0x00000007,0x0000002c,0x0000002b,0x00050051,
	0x00000006,0x0000002d,0x0000002c,0x00000000,0x00050051,0x00000006,0x0000002e,0x0000002c,
	0x00000001,0x00050051,0x00000006,0x0000002f,0x0000002c,0x00000002,0x00070050,0x0000000b,
	0x00000030,0x0000002d,0x0000002e,0x0000002f,0x00000014,0x00050091,0x00000007,0x00000031,
	0x00000029,0x00000030,0x0003003e,0x00000028,0x00000031,0x0004003d,0x00000038,0x00000040,
	0x0000003f,0x00060041,0x00000041,0x00000042,0x0000003d,0x00000036,0x00000040,0x0004003d,
	0x00000037,0x00000043,0x00000042,0x0004003d,0x00000007,0x00000044,0x00000028,0x00050051,
	0x00000006,0x00000045,0x00000044,0x00000000,0x00050051,0x00000006,0x00000046,0x00000044,
	0x00000001,0x00050051,0x00000006,0x00000047,0x00000044,0x00000002,0x00070050,0x0000000b,
	0x00000048,0x00000045,0x00000046,0x00000047,0x00000014,0x00050091,0x0000000b,0x00000049,
	0x00000043,0x00000048,0x00050041,0x0000004a,0x0000004b,0x00000034,0x00000036,0x0003003e,
	0x0000004b,0x00000049,0x0004003d,0x0000000b,0x0000004e,0x0000004d,0x0003003e,0x0000004c,
	0x0000004e,0x000100fd,0x00010038
};

/*
#version 430 core

#ifdef MULTIVIEW
#extension GL_OVR_multiview2 : enable
#define VIEW_COUNT  2
#define VIEW_INDEX  gl_ViewID_OVR
#else
#define VIEW_COUNT  1
#define VIEW_INDEX  0
#endif

layout (location = 0) in vec3 a_pos_ws;
layout (location = 1) in vec4 a_col;
layout (location = 2) in vec3 a_normal_ws;

layout(set = 0, binding = 0) uniform common_t {
	mat4 proj_from_world[VIEW_COUNT];
} g_common;

out gl_PerVertex {
	vec4 gl_Position;
};
layout(location = 0) out vec3 v_nvec_ws;
layout(location = 1) out vec4 v_col;

void main(void)
{
	gl_Position = g_common.proj_from_world[VIEW_INDEX]*vec4(a_pos_ws, 1.0);
	v_nvec_ws = a_normal_ws;
	v_col = a_col;
}
*/
static uint32_t const g_imdd_vulkan_spv_array_filled_vert[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x0000002b,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x000b000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000a,0x00000019,0x00000024,
	0x00000025,0x00000027,0x00000029,0x00030003,0x00000002,0x000001ae,0x00040005,0x00000004,
	0x6e69616d,0x00000000,0x00060005,0x00000008,0x505f6c67,0x65567265,0x78657472,0x00000000,
	0x00060006,0x00000008,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x0000000a,
	0x00000000,0x00050005,0x00000011,0x6d6d6f63,0x745f6e6f,0x00000000,0x00070006,0x00000011,
	0x00000000,0x6a6f7270,0x6f72665f,0x6f775f6d,0x00646c72,0x00050005,0x00000013,0x6f635f67,
	0x6e6f6d6d,0x00000000,0x00050005,0x00000019,0x6f705f61,0x73775f73,0x00000000,0x00050005,
	0x00000024,0x766e5f76,0x775f6365,0x00000073,0x00050005,0x00000025,0x6f6e5f61,0x6c616d72,
	0x0073775f,0x00040005,0x00000027,0x6f635f76,0x0000006c,0x00040005,0x00000029,0x6f635f61,
	0x0000006c,0x00050048,0x00000008,0x00000000,0x0000000b,0x00000000,0x00030047,0x00000008,
	0x00000002,0x00040047,0x00000010,0x00000006,0x00000040,0x00040048,0x00000011,0x00000000,
	0x00000005,0x00050048,0x00000011,0x00000000,0x00000023,0x00000000,0x00050048,0x00000011,
	0x00000000,0x00000007,0x00000010,0x00030047,0x00000011,0x00000002,0x00040047,0x00000013,
	0x00000022,0x00000000,0x00040047,0x00000013,0x00000021,0x00000000,0x00040047,0x00000019,
	0x0000001e,0x00000000,0x00040047,0x00000024,0x0000001e,0x00000000,0x00040047,0x00000025,
	0x0000001e,0x00000002,0x00040047,0x00000027,0x0000001e,0x00000001,0x00040047,0x00000029,
	0x0000001e,0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,
	0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x0003001e,0x00000008,
	0x00000007,0x00040020,0x00000009,0x00000003,0x00000008,0x0004003b,0x00000009,0x0000000a,
	0x00000003,0x00040015,0x0000000b,0x00000020,0x00000001,0x0004002b,0x0000000b,0x0000000c,
	0x00000000,0x00040018,0x0000000d,0x00000007,0x00000004,0x00040015,0x0000000e,0x00000020,
	0x00000000,0x0004002b,0x0000000e,0x0000000f,0x00000001,0x0004001c,0x00000010,0x0000000d,
	0x0000000f,0x0003001e,0x00000011,0x00000010,0x00040020,0x00000012,0x00000002,0x00000011,
	0x0004003b,0x00000012,0x00000013,0x00000002,0x00040020,0x00000014,0x00000002,0x0000000d,
	0x00040017,0x00000017,0x00000006,0x00000003,0x00040020,0x00000018,0x00000001,0x00000017,
	0x0004003b,0x00000018,0x00000019,0x00000001,0x0004002b,0x00000006,0x0000001b,0x3f800000,
	0x00040020,0x00000021,0x00000003,0x00000007,0x00040020,0x00000023,0x00000003,0x00000017,
	0x0004003b,0x00000023,0x00000024,0x00000003,0x0004003b,0x00000018,0x00000025,0x00000001,
	0x0004003b,0x00000021,0x00000027,0x00000003,0x00040020,0x00000028,0x00000001,0x00000007,
	0x0004003b,0x00000028,0x00000029,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,
	0x00000003,0x000200f8,0x00000005,0x00060041,0x00000014,0x00000015,0x00000013,0x0000000c,
	0x0000000c,0x0004003d,0x0000000d,0x00000016,0x00000015,0x0004003d,0x00000017,0x0000001a,
	0x00000019,0x00050051,0x00000006,0x0000001c,0x0000001a,0x00000000,0x00050051,0x00000006,
	0x0000001d,0x0000001a,0x00000001,0x00050051,0x00000006,0x0000001e,0x0000001a,0x00000002,
	0x00070050,0x00000007,0x0000001f,0x0000001c,0x0000001d,0x0000001e,0x0000001b,0x00050091,
	0x00000007,0x00000020,0x00000016,0x0000001f,0x00050041,0x00000021,0x00000022,0x0000000a,
	0x0000000c,0x0003003e,0x00000022,0x00000020,0x0004003d,0x00000017,0x00000026,0x00000025,
	0x0003003e,0x00000024,0x00000026,0x0004003d,0x00000007,0x0000002a,0x00000029,0x0003003e,
	0x00000027,0x0000002a,0x000100fd,0x00010038
};
static uint32_t const g_imdd_vulkan_spv_array_filled_mv_vert[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x0000002e,0x00000000,0x00020011,0x00000001,0x00020011,
	0x00001157,0x0006000a,0x5f565053,0x5f52484b,0x746c756d,0x65697669,0x00000077,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x000c000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000a,0x00000015,0x0000001c,
	0x00000027,0x00000028,0x0000002a,0x0000002c,0x00030003,0x00000002,0x000001ae,0x00060004,
	0x4f5f4c47,0x6d5f5256,0x69746c75,0x77656976,0x00000032,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00060005,0x00000008,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,
	0x00000008,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x0000000a,0x00000000,
	0x00050005,0x00000011,0x6d6d6f63,0x745f6e6f,0x00000000,0x00070006,0x00000011,0x00000000,
	0x6a6f7270,0x6f72665f,0x6f775f6d,0x00646c72,0x00050005,0x00000013,0x6f635f67,0x6e6f6d6d,
	0x00000000,0x00060005,0x00000015,0x565f6c67,0x49776569,0x564f5f44,0x00000052,0x00050005,
	0x0000001c,0x6f705f61,0x73775f73,0x00000000,0x00050005,0x00000027,0x766e5f76,0x775f6365,
	0x00000073,0x00050005,0x00000028,0x6f6e5f61,0x6c616d72,0x0073775f,0x00040005,0x0000002a,
	0x6f635f76,0x0000006c,0x00040005,0x0000002c,0x6f635f61,0x0000006c,0x00050048,0x00000008,
	0x00000000,0x0000000b,0x00000000,0x00030047,0x00000008,0x00000002,0x00040047,0x00000010,
	0x00000006,0x00000040,0x00040048,0x00000011,0x00000000,0x00000005,0x00050048,0x00000011,
	0x00000000,0x00000023,0x00000000,0x00050048,0x00000011,0x00000000,0x00000007,0x00000010,
	0x00030047,0x00000011,0x00000002,0x00040047,0x00000013,0x00000022,0x00000000,0x00040047,
	0x00000013,0x00000021,0x00000000,0x00040047,0x00000015,0x0000000b,0x00001158,0x00040047,
	0x0000001c,0x0000001e,0x00000000,0x00040047,0x00000027,0x0000001e,0x00000000,0x00040047,
	0x00000028,0x0000001e,0x00000002,0x00040047,0x0000002a,0x0000001e,0x00000001,0x00040047,
	0x0000002c,0x0000001e,0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,
	0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x0003001e,
	0x00000008,0x00000007,0x00040020,0x00000009,0x00000003,0x00000008,0x0004003b,0x00000009,
	0x0000000a,0x00000003,0x00040015,0x0000000b,0x00000020,0x00000001,0x0004002b,0x0000000b,
	0x0000000c,0x00000000,0x00040018,0x0000000d,0x00000007,0x00000004,0x00040015,0x0000000e,
	0x00000020,0x00000000,0x0004002b,0x0000000e,0x0000000f,0x00000002,0x0004001c,0x00000010,
	0x0000000d,0x0000000f,0x0003001e,0x00000011,0x00000010,0x00040020,0x00000012,0x00000002,
	0x00000011,0x0004003b,0x00000012,0x00000013,0x00000002,0x00040020,0x00000014,0x00000001,
	0x0000000e,0x0004003b,0x00000014,0x00000015,0x00000001,0x00040020,0x00000017,0x00000002,
	0x0000000d,0x00040017,0x0000001a,0x00000006,0x00000003,0x00040020,0x0000001b,0x00000001,
	0x0000001a,0x0004003b,0x0000001b,0x0000001c,0x00000001,0x0004002b,0x00000006,0x0000001e,
	0x3f800000,0x00040020,0x00000024,0x00000003,0x00000007,0x00040020,0x00000026,0x00000003,
	0x0000001a,0x0004003b,0x00000026,0x00000027,0x00000003,0x0004003b,0x0000001b,0x00000028,
	0x00000001,0x0004003b,0x00000024,0x0000002a,0x00000003,0x00040020,0x0000002b,0x00000001,
	0x00000007,0x0004003b,0x0000002b,0x0000002c,0x00000001,0x00050036,0x00000002,0x00000004,
	0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000e,0x00000016,0x00000015,
	0x00060041,0x00000017,0x00000018,0x00000013,0x0000000c,0x00000016,0x0004003d,0x0000000d,
	0x00000019,0x00000018,0x0004003d,0x0000001a,0x0000001d,0x0000001c,0x00050051,0x00000006,
	0x0000001f,0x0000001d,0x00000000,0x00050051,0x00000006,0x00000020,0x0000001d,0x00000001,
	0x00050051,0x00000006,0x00000021,0x0000001d,0x00000002,0x00070050,0x00000007,0x00000022,
	0x0000001f,0x00000020,0x00000021,0x0000001e,0x00050091,0x00000007,0x00000023,0x00000019,
	0x00000022,0x00050041,0x00000024,0x00000025,0x0000000a,0x0000000c,0x0003003e,0x00000025,
	0x00000023,0x0004003d,0x0000001a,0x00000029,0x00000028,0x0003003e,0x00000027,0x00000029,
	0x0004003d,0x00000007,0x0000002d,0x0000002c,0x0003003e,0x0000002a,0x0000002d,0x000100fd,
	0x00010038
};

/*
#version 430 core

#ifdef MULTIVIEW
#extension GL_OVR_multiview2 : enable
#define VIEW_COUNT  2
#define VIEW_INDEX  gl_ViewID_OVR
#else
#define VIEW_COUNT  1
#define VIEW_INDEX  0
#endif

layout (location = 0) in vec3 a_pos_ws;
layout (location = 1) in vec4 a_col;

layout(set = 0, binding = 0) uniform common_t {
	mat4 proj_from_world[VIEW_COUNT];
} g_common;

out gl_PerVertex {
	vec4 gl_Position;
};
layout(location = 0) out vec4 v_col;

void main(void)
{
	gl_Position = g_common.proj_from_world[VIEW_INDEX]*vec4(a_pos_ws, 1.0);
	v_col = a_col;
}
*/
static uint32_t const g_imdd_vulkan_spv_array_wire_vert[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x00000027,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0009000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000a,0x00000019,0x00000023,
	0x00000025,0x00030003,0x00000002,0x000001ae,0x00040005,0x00000004,0x6e69616d,0x00000000,
	0x00060005,0x00000008,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x00000008,
	0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x0000000a,0x00000000,0x00050005,
	0x00000011,0x6d6d6f63,0x745f6e6f,0x00000000,0x00070006,0x00000011,0x00000000,0x6a6f7270,
	0x6f72665f,0x6f775f6d,0x00646c72,0x00050005,0x00000013,0x6f635f67,0x6e6f6d6d,0x00000000,
	0x00050005,0x00000019,0x6f705f61,0x73775f73,0x00000000,0x00040005,0x00000023,0x6f635f76,
	0x0000006c,0x00040005,0x00000025,0x6f635f61,0x0000006c,0x00050048,0x00000008,0x00000000,
	0x0000000b,0x00000000,0x00030047,0x00000008,0x00000002,0x00040047,0x00000010,0x00000006,
	0x00000040,0x00040048,0x00000011,0x00000000,0x00000005,0x00050048,0x00000011,0x00000000,
	0x00000023,0x00000000,0x00050048,0x00000011,0x00000000,0x00000007,0x00000010,0x00030047,
	0x00000011,0x00000002,0x00040047,0x00000013,0x00000022,0x00000000,0x00040047,0x00000013,
	0x00000021,0x00000000,0x00040047,0x00000019,0x0000001e,0x00000000,0x00040047,0x00000023,
	0x0000001e,0x00000000,0x00040047,0x00000025,0x0000001e,0x00000001,0x00020013,0x00000002,
	0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,
	0x00000006,0x00000004,0x0003001e,0x00000008,0x00000007,0x00040020,0x00000009,0x00000003,
	0x00000008,0x0004003b,0x00000009,0x0000000a,0x00000003,0x00040015,0x0000000b,0x00000020,
	0x00000001,0x0004002b,0x0000000b,0x0000000c,0x00000000,0x00040018,0x0000000d,0x00000007,
	0x00000004,0x00040015,0x0000000e,0x00000020,0x00000000,0x0004002b,0x0000000e,0x0000000f,
	0x00000001,0x0004001c,0x00000010,0x0000000d,0x0000000f,0x0003001e,0x00000011,0x00000010,
	0x00040020,0x00000012,0x00000002,0x00000011,0x0004003b,0x00000012,0x00000013,0x00000002,
	0x00040020,0x00000014,0x00000002,0x0000000d,0x00040017,0x00000017,0x00000006,0x00000003,
	0x00040020,0x00000018,0x00000001,0x00000017,0x0004003b,0x00000018,0x00000019,0x00000001,
	0x0004002b,0x00000006,0x0000001b,0x3f800000,0x00040020,0x00000021,0x00000003,0x00000007,
	0x0004003b,0x00000021,0x00000023,0x00000003,0x00040020,0x00000024,0x00000001,0x00000007,
	0x0004003b,0x00000024,0x00000025,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,
	0x00000003,0x000200f8,0x00000005,0x00060041,0x00000014,0x00000015,0x00000013,0x0000000c,
	0x0000000c,0x0004003d,0x0000000d,0x00000016,0x00000015,0x0004003d,0x00000017,0x0000001a,
	0x00000019,0x00050051,0x00000006,0x0000001c,0x0000001a,0x00000000,0x00050051,0x00000006,
	0x0000001d,0x0000001a,0x00000001,0x00050051,0x00000006,0x0000001e,0x0000001a,0x00000002,
	0x00070050,0x00000007,0x0000001f,0x0000001c,0x0000001d,0x0000001e,0x0000001b,0x00050091,
	0x00000007,0x00000020,0x00000016,0x0000001f,0x00050041,0x00000021,0x00000022,0x0000000a,
	0x0000000c,0x0003003e,0x00000022,0x00000020,0x0004003d,0x00000007,0x00000026,0x00000025,
	0x0003003e,0x00000023,0x00000026,0x000100fd,0x00010038
};
static uint32_t const g_imdd_vulkan_spv_array_wire_mv_vert[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x0000002a,0x00000000,0x00020011,0x00000001,0x00020011,
	0x00001157,0x0006000a,0x5f565053,0x5f52484b,0x746c756d,0x65697669,0x00000077,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x000a000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000a,0x00000015,0x0000001c,
	0x00000026,0x00000028,0x00030003,0x00000002,0x000001ae,0x00060004,0x4f5f4c47,0x6d5f5256,
	0x69746c75,0x77656976,0x00000032,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00060005,
	0x00000008,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x00000008,0x00000000,
	0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x0000000a,0x00000000,0x00050005,0x00000011,
	0x6d6d6f63,0x745f6e6f,0x00000000,0x00070006,0x00000011,0x00000000,0x6a6f7270,0x6f72665f,
	0x6f775f6d,0x00646c72,0x00050005,0x00000013,0x6f635f67,0x6e6f6d6d,0x00000000,0x00060005,
	0x00000015,0x565f6c67,0x49776569,0x564f5f44,0x00000052,0x00050005,0x0000001c,0x6f705f61,
	0x73775f73,0x00000000,0x00040005,0x00000026,0x6f635f76,0x0000006c,0x00040005,0x00000028,
	0x6f635f61,0x0000006c,0x00050048,0x00000008,0x00000000,0x0000000b,0x00000000,0x00030047,
	0x00000008,0x00000002,0x00040047,0x00000010,0x00000006,0x00000040,0x00040048,0x00000011,
	0x00000000,0x00000005,0x00050048,0x00000011,0x00000000,0x00000023,0x00000000,0x00050048,
	0x00000011,0x00000000,0x00000007,0x00000010,0x00030047,0x00000011,0x00000002,0x00040047,
	0x00000013,0x00000022,0x00000000,0x00040047,0x00000013,0x00000021,0x00000000,0x00040047,
	0x00000015,0x0000000b,0x00001158,0x00040047,0x0000001c,0x0000001e,0x00000000,0x00040047,
	0x00000026,0x0000001e,0x00000000,0x00040047,0x00000028,0x0000001e,0x00000001,0x00020013,
	0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,
	0x00000007,0x00000006,0x00000004,0x0003001e,0x00000008,0x00000007,0x00040020,0x00000009,
	0x00000003,0x00000008,0x0004003b,0x00000009,0x0000000a,0x00000003,0x00040015,0x0000000b,
	0x00000020,0x00000001,0x0004002b,0x0000000b,0x0000000c,0x00000000,0x00040018,0x0000000d,
	0x00000007,0x00000004,0x00040015,0x0000000e,0x00000020,0x00000000,0x0004002b,0x0000000e,
	0x0000000f,0x00000002,0x0004001c,0x00000010,0x0000000d,0x0000000f,0x0003001e,0x00000011,
	0x00000010,0x00040020,0x00000012,0x00000002,0x00000011,0x0004003b,0x00000012,0x00000013,
	0x00000002,0x00040020,0x00000014,0x00000001,0x0000000e,0x0004003b,0x00000014,0x00000015,
	0x00000001,0x00040020,0x00000017,0x00000002,0x0000000d,0x00040017,0x0000001a,0x00000006,
	0x00000003,0x00040020,0x0000001b,0x00000001,0x0000001a,0x0004003b,0x0000001b,0x0000001c,
	0x00000001,0x0004002b,0x00000006,0x0000001e,0x3f800000,0x00040020,0x00000024,0x00000003,
	0x00000007,0x0004003b,0x00000024,0x00000026,0x00000003,0x00040020,0x00000027,0x00000001,
	0x00000007,0x0004003b,0x00000027,0x00000028,0x00000001,0x00050036,0x00000002,0x00000004,
	0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000e,0x00000016,0x00000015,
	0x00060041,0x00000017,0x00000018,0x00000013,0x0000000c,0x00000016,0x0004003d,0x0000000d,
	0x00000019,0x00000018,0x0004003d,0x0000001a,0x0000001d,0x0000001c,0x00050051,0x00000006,
	0x0000001f,0x0000001d,0x00000000,0x00050051,0x00000006,0x00000020,0x0000001d,0x00000001,
	0x00050051,0x00000006,0x00000021,0x0000001d,0x00000002,0x00070050,0x00000007,0x00000022,
	0x0000001f,0x00000020,0x00000021,0x0000001e,0x00050091,0x00000007,0x00000023,0x00000019,
	0x00000022,0x00050041,0x00000024,0x00000025,0x0000000a,0x0000000c,0x0003003e,0x00000025,
	0x00000023,0x0004003d,0x00000007,0x00000029,0x00000028,0x0003003e,0x00000026,0x00000029,
	0x000100fd,0x00010038
};

/*
#version 430 core

layout(location = 0) in vec3 v_nvec_ws;
layout(location = 1) in vec4 v_col;

layout(location = 0) out vec4 o_col;

void main(void)
{
	vec3 normal_ws = normalize(v_nvec_ws);
	vec3 light_dir_ws = normalize(vec3(1.0, 2.0, 0.5));

	float n_dot_l = dot(normal_ws, light_dir_ws);
	o_col = vec4(v_col.xyz*(0.5 + 0.45*n_dot_l), v_col.w);
}
*/
static uint32_t const g_imdd_vulkan_spv_filled_frag[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x0000002e,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0008000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x0000000b,0x0000001a,0x0000001c,
	0x00030010,0x00000004,0x00000007,0x00030003,0x00000002,0x000001ae,0x00040005,0x00000004,
	0x6e69616d,0x00000000,0x00050005,0x00000009,0x6d726f6e,0x775f6c61,0x00000073,0x00050005,
	0x0000000b,0x766e5f76,0x775f6365,0x00000073,0x00060005,0x0000000e,0x6867696c,0x69645f74,
	0x73775f72,0x00000000,0x00040005,0x00000014,0x6f645f6e,0x006c5f74,0x00040005,0x0000001a,
	0x6f635f6f,0x0000006c,0x00040005,0x0000001c,0x6f635f76,0x0000006c,0x00040047,0x0000000b,
	0x0000001e,0x00000000,0x00040047,0x0000001a,0x0000001e,0x00000000,0x00040047,0x0000001c,
	0x0000001e,0x00000001,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,
	0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000003,0x00040020,0x00000008,
	0x00000007,0x00000007,0x00040020,0x0000000a,0x00000001,0x00000007,0x0004003b,0x0000000a,
	0x0000000b,0x00000001,0x0004002b,0x00000006,0x0000000f,0x3edf7483,0x0004002b,0x00000006,
	0x00000010,0x3f5f7483,0x0004002b,0x00000006,0x00000011,0x3e5f7483,0x0006002c,0x00000007,
	0x00000012,0x0000000f,0x00000010,0x00000011,0x00040020,0x00000013,0x00000007,0x00000006,
	0x00040017,0x00000018,0x00000006,0x00000004,0x00040020,0x00000019,0x00000003,0x00000018,
	0x0004003b,0x00000019,0x0000001a,0x00000003,0x00040020,0x0000001b,0x00000001,0x00000018,
	0x0004003b,0x0000001b,0x0000001c,0x00000001,0x0004002b,0x00000006,0x0000001f,0x3f000000,
	0x0004002b,0x00000006,0x00000020,0x3ee66666,0x00040015,0x00000025,0x00000020,0x00000000,
	0x0004002b,0x00000025,0x00000026,0x00000003,0x00040020,0x00000027,0x00000001,0x00000006,
	0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003b,
	0x00000008,0x00000009,0x00000007,0x0004003b,0x00000008,0x0000000e,0x00000007,0x0004003b,
	0x00000013,0x00000014,0x00000007,0x0004003d,0x00000007,0x0000000c,0x0000000b,0x0006000c,
	0x00000007,0x0000000d,0x00000001,0x00000045,0x0000000c,0x0003003e,0x00000009,0x0000000d,
	0x0003003e,0x0000000e,0x00000012,0x0004003d,0x00000007,0x00000015,0x00000009,0x0004003d,
	0x00000007,0x00000016,0x0000000e,0x00050094,0x00000006,0x00000017,0x00000015,0x00000016,
	0x0003003e,0x00000014,0x00000017,0x0004003d,0x00000018,0x0000001d,0x0000001c,0x0008004f,
	0x00000007,0x0000001e,0x0000001d,0x0000001d,0x00000000,0x00000001,0x00000002,0x0004003d,
	0x00000006,0x00000021,0x00000014,0x00050085,0x00000006,0x00000022,0x00000020,0x00000021,
	0x00050081,0x00000006,0x00000023,0x0000001f,0x00000022,0x0005008e,0x00000007,0x00000024,
	0x0000001e,0x00000023,0x00050041,0x00000027,0x00000028,0x0000001c,0x00000026,0x0004003d,
	0x00000006,0x00000029,0x00000028,0x00050051,0x00000006,0x0000002a,0x00000024,0x00000000,
	0x00050051,0x00000006,0x0000002b,0x00000024,0x00000001,0x00050051,0x00000006,0x0000002c,
	0x00000024,0x00000002,0x00070050,0x00000018,0x0000002d,0x0000002a,0x0000002b,0x0000002c,
	0x00000029,0x0003003e,0x0000001a,0x0000002d,0x000100fd,0x00010038
};

/*
#version 430 core

layout(location = 0) in vec4 v_col;

layout(location = 0) out vec4 o_col;

void main(void)
{
	o_col = v_col;
}
*/
static uint32_t const g_imdd_vulkan_spv_wire_frag[] = {
	// 7.12.3352
	0x07230203,0x00010000,0x00080007,0x0000000d,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000b,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001ae,0x00040005,0x00000004,0x6e69616d,
	0x00000000,0x00040005,0x00000009,0x6f635f6f,0x0000006c,0x00040005,0x0000000b,0x6f635f76,
	0x0000006c,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000b,0x0000001e,
	0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
	0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,
	0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040020,0x0000000a,0x00000001,
	0x00000007,0x0004003b,0x0000000a,0x0000000b,0x00000001,0x00050036,0x00000002,0x00000004,
	0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,0x00000007,0x0000000c,0x0000000b,
	0x0003003e,0x00000009,0x0000000c,0x000100fd,0x00010038
};

static inline
uint32_t imdd_vulkan_pipeline_index(
	imdd_vulkan_draw_type_enum_t draw_type,
	imdd_style_enum_t style,
	imdd_blend_enum_t blend,
	imdd_zmode_enum_t zmode)
{
	return (draw_type << 3) | (style << 2) | (blend << 1) | zmode;
}

static
void imdd_vulkan_verify(
	imdd_vulkan_context_t const *ctx,
	VkResult result)
{
	if (ctx->verify_fn) {
		ctx->verify_fn(result);
	}
}

static
VkShaderModule imdd_vulkan_load_shader(
	imdd_vulkan_context_t const *ctx,
	VkDevice device,
	uint32_t const *code,
	uint32_t code_size)
{
	VkShaderModuleCreateInfo create_info;
	IMDD_VULKAN_SET_ZERO(create_info);
	create_info.sType		= VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
	create_info.codeSize	= code_size;
	create_info.pCode		= code;

	VkShaderModule module = VK_NULL_HANDLE;
	imdd_vulkan_verify(ctx, ctx->fp.vkCreateShaderModule(
		device, &create_info, NULL,
		&module));
	return module;
}

#define IMDD_VULKAN_LOAD_SHADER(CTX, DEVICE, U32_ARRAY)		imdd_vulkan_load_shader(CTX, DEVICE, U32_ARRAY, sizeof(U32_ARRAY))

static
VkDeviceSize imdd_vulkan_align(VkDeviceSize size, VkDeviceSize alignment)
{
	return (size + alignment - 1) & ~(alignment - 1);
}

static
VkBuffer imdd_vulkan_create_buffer(
	imdd_vulkan_context_t const *ctx,
	VkDevice device,
	VkDeviceSize size,
	VkBufferUsageFlags usage,
	VkDeviceSize *buffer_offset,
	VkDeviceSize *next_offset,
	uint32_t *memory_type_bits)
{
	VkBufferCreateInfo create_info;
	IMDD_VULKAN_SET_ZERO(create_info);
	create_info.sType	= VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
	create_info.size	= size;
	create_info.usage	= usage;

	VkBuffer buffer = VK_NULL_HANDLE;
	imdd_vulkan_verify(ctx, ctx->fp.vkCreateBuffer(
		device,
		&create_info,
		NULL,
		&buffer));

	VkMemoryRequirements mem_req;
	IMDD_VULKAN_SET_ZERO(mem_req);
	ctx->fp.vkGetBufferMemoryRequirements(
		device,
		buffer,
		&mem_req);

	VkDeviceSize const offset = imdd_vulkan_align(*next_offset, mem_req.alignment);
	*buffer_offset = offset;
	*next_offset = offset + imdd_vulkan_align(mem_req.size, ctx->atom_size);

	*memory_type_bits &= mem_req.memoryTypeBits;

	return buffer;
}

static
uint32_t imdd_vulkan_get_memory_type_index(
	VkPhysicalDeviceMemoryProperties const *memory_properties,
	uint32_t memory_type_bits,
	VkMemoryPropertyFlags property_flags)
{
	for (uint32_t i = 0; i < memory_properties->memoryTypeCount; ++i) {
		VkMemoryType const *memory_type = &memory_properties->memoryTypes[i];
		if ((memory_type_bits & (1 << i)) != 0 && (memory_type->propertyFlags & property_flags) == property_flags) {
			return i;
		}
	}
	return 0xffffffffU;
}

#define IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, NAME)	(FP)->NAME = &NAME

#define IMDD_VULKAN_SET_GLOBAL_FP(FP)												\
	do {																			\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkGetPhysicalDeviceProperties);			\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkGetPhysicalDeviceMemoryProperties);	\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCreateShaderModule);					\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCreateDescriptorSetLayout);			\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCreatePipelineLayout);					\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCreateGraphicsPipelines);				\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkAllocateMemory);						\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkMapMemory);							\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkFlushMappedMemoryRanges);				\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCreateBuffer);							\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkGetBufferMemoryRequirements);			\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkBindBufferMemory);						\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCreateDescriptorPool);					\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkAllocateDescriptorSets);				\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkUpdateDescriptorSets);					\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCmdCopyBuffer);						\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCmdPipelineBarrier);					\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCmdBindPipeline);						\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCmdBindDescriptorSets);				\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCmdBindVertexBuffers);					\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCmdBindIndexBuffer);					\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCmdDraw);								\
		IMDD_VULKAN_SET_GLOBAL_FP_IMPL(FP, vkCmdDrawIndexed);						\
	} while(0)

void imdd_vulkan_init(
	imdd_vulkan_context_t *ctx,
	uint32_t shape_capacity,
	uint32_t triangle_capacity,
	uint32_t line_capacity,
	imdd_vulkan_fp_t const *fp,
	imdd_vulkan_verify_fn_t verify_fn,
	VkPhysicalDevice physical_device,
	VkDevice device,
	uint32_t flags)
{
	uint32_t const instance_capacity = shape_capacity;
	uint32_t const filled_vertex_capacity = 3*triangle_capacity;
	uint32_t const wire_vertex_capacity = 2*line_capacity;

	memset(ctx, 0, sizeof(imdd_vulkan_context_t));
	memcpy(&ctx->fp, fp, sizeof(imdd_vulkan_fp_t));
	ctx->verify_fn = verify_fn;
	ctx->flags = flags;
	ctx->instance_capacity = instance_capacity;
	ctx->filled_vertex_capacity = filled_vertex_capacity;
	ctx->wire_vertex_capacity = wire_vertex_capacity;

	uint32_t const uniform_size_per_draw = ((flags & IMDD_VULKAN_FLAG_MULTIVIEW) ? 2 : 1)*16*sizeof(float);

	// get the granularity at which we can flush memory
	VkPhysicalDeviceProperties physical_device_properties;
	IMDD_VULKAN_SET_ZERO(physical_device_properties);
	ctx->fp.vkGetPhysicalDeviceProperties(physical_device, &physical_device_properties);
	ctx->atom_size = physical_device_properties.limits.nonCoherentAtomSize;

	// get info about memory properties
	VkPhysicalDeviceMemoryProperties physical_device_memory_properties;
	IMDD_VULKAN_SET_ZERO(physical_device_memory_properties);
	ctx->fp.vkGetPhysicalDeviceMemoryProperties(physical_device, &physical_device_memory_properties);

	// load shaders
	if (flags & IMDD_VULKAN_FLAG_MULTIVIEW) {
		ctx->instance_filled_vert = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_instance_filled_mv_vert);
		ctx->instance_wire_vert = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_instance_wire_mv_vert);
		ctx->array_filled_vert = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_array_filled_mv_vert);
		ctx->array_wire_vert = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_array_wire_mv_vert);
	} else {
		ctx->instance_filled_vert = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_instance_filled_vert);
		ctx->instance_wire_vert = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_instance_wire_vert);
		ctx->array_filled_vert = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_array_filled_vert);
		ctx->array_wire_vert = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_array_wire_vert);
	}
	ctx->filled_frag = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_filled_frag);
	ctx->wire_frag = IMDD_VULKAN_LOAD_SHADER(ctx, device, g_imdd_vulkan_spv_wire_frag);

	// create layouts
	VkDescriptorSetLayoutBinding descriptor_set_layout_binding;
	IMDD_VULKAN_SET_ZERO(descriptor_set_layout_binding);
	descriptor_set_layout_binding.descriptorType	= VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	descriptor_set_layout_binding.descriptorCount	= 1;
	descriptor_set_layout_binding.stageFlags		= VK_SHADER_STAGE_VERTEX_BIT;

	VkDescriptorSetLayoutCreateInfo descriptor_set_layout_create_info;
	IMDD_VULKAN_SET_ZERO(descriptor_set_layout_create_info);
	descriptor_set_layout_create_info.sType			= VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
	descriptor_set_layout_create_info.bindingCount	= 1;
	descriptor_set_layout_create_info.pBindings		= &descriptor_set_layout_binding;

	imdd_vulkan_verify(ctx, ctx->fp.vkCreateDescriptorSetLayout(
		device,
		&descriptor_set_layout_create_info,
		NULL,
		&ctx->common_descriptor_set_layout));

	VkPipelineLayoutCreateInfo pipeline_layout_create_info;
	IMDD_VULKAN_SET_ZERO(pipeline_layout_create_info);
	pipeline_layout_create_info.sType			= VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	pipeline_layout_create_info.setLayoutCount	= 1;
	pipeline_layout_create_info.pSetLayouts		= &ctx->common_descriptor_set_layout;
	imdd_vulkan_verify(ctx, ctx->fp.vkCreatePipelineLayout(
		device,
		&pipeline_layout_create_info,
		NULL,
		&ctx->common_pipeline_layout));

	// create a descriptor pool
	VkDescriptorPoolSize descriptor_pool_size;
	IMDD_VULKAN_SET_ZERO(descriptor_pool_size);
	descriptor_pool_size.type				= VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	descriptor_pool_size.descriptorCount	= IMDD_VULKAN_DESCRIPTOR_COUNT;

	VkDescriptorPoolCreateInfo descriptor_pool_create_info;
	IMDD_VULKAN_SET_ZERO(descriptor_pool_create_info);
	descriptor_pool_create_info.sType			= VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	descriptor_pool_create_info.maxSets			= IMDD_VULKAN_DESCRIPTOR_COUNT;
	descriptor_pool_create_info.poolSizeCount	= 1;
	descriptor_pool_create_info.pPoolSizes		= &descriptor_pool_size;

	imdd_vulkan_verify(ctx, ctx->fp.vkCreateDescriptorPool(
		device, &descriptor_pool_create_info, NULL, &ctx->descriptor_pool));

	// total up the amount of memory we need
	VkDeviceSize device_next_offset = 0;
	uint32_t device_memory_type_bits = 0xffffffffU;
	VkDeviceSize host_next_offset = 0;
	uint32_t host_memory_type_bits = 0xffffffffU;

	for (imdd_style_enum_t style = (imdd_style_enum_t)0; style < IMDD_STYLE_COUNT; style = (imdd_style_enum_t)(1 + style)) {
		imdd_vulkan_mesh_buffer_t *const mesh_buffer = &ctx->mesh_buffers[style];
		imdd_mesh_layout_init(&mesh_buffer->layout, style);

		uint32_t const vertex_size = (style == IMDD_STYLE_FILLED) ? sizeof(imdd_mesh_filled_vertex_t) : sizeof(imdd_mesh_wire_vertex_t);
		mesh_buffer->vertex_buffer_size = mesh_buffer->layout.vertex_count*vertex_size;
		mesh_buffer->index_buffer_size = mesh_buffer->layout.index_count*sizeof(uint16_t);

		mesh_buffer->vertex_staging_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			mesh_buffer->vertex_buffer_size,
			VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
			&mesh_buffer->vertex_staging_offset,
			&host_next_offset,
			&host_memory_type_bits);
		mesh_buffer->index_staging_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			mesh_buffer->index_buffer_size,
			VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
			&mesh_buffer->index_staging_offset,
			&host_next_offset,
			&host_memory_type_bits);

		mesh_buffer->vertex_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			mesh_buffer->vertex_buffer_size,
			VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT,
			&mesh_buffer->vertex_offset,
			&device_next_offset,
			&device_memory_type_bits);
		mesh_buffer->index_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			mesh_buffer->index_buffer_size,
			VK_BUFFER_USAGE_INDEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT,
			&mesh_buffer->index_offset,
			&device_next_offset,
			&device_memory_type_bits);
	}
	for (uint32_t frame_index = 0; frame_index < IMDD_VULKAN_FRAME_COUNT; ++frame_index) {
		imdd_vulkan_frame_t *const frame = &ctx->frames[frame_index];
		frame->instance_transform_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			sizeof(imdd_instance_transform_t)*instance_capacity,
			VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
			&frame->instance_transform_offset,
			&host_next_offset,
			&host_memory_type_bits);
		frame->instance_color_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			sizeof(imdd_instance_color_t)*instance_capacity,
			VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
			&frame->instance_color_offset,
			&host_next_offset,
			&host_memory_type_bits);
		frame->filled_vertex_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			sizeof(imdd_array_filled_vertex_t)*filled_vertex_capacity,
			VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
			&frame->filled_vertex_offset,
			&host_next_offset,
			&host_memory_type_bits);
		frame->wire_vertex_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			sizeof(imdd_array_wire_vertex_t)*wire_vertex_capacity,
			VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
			&frame->wire_vertex_offset,
			&host_next_offset,
			&host_memory_type_bits);
	}
	for (uint32_t descriptor_index = 0; descriptor_index < IMDD_VULKAN_DESCRIPTOR_COUNT; ++descriptor_index) {
		imdd_vulkan_descriptor_t *const desc = &ctx->descriptors[descriptor_index];
		desc->common_uniform_buffer = imdd_vulkan_create_buffer(
			ctx, device,
			uniform_size_per_draw,
			VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
			&desc->common_uniform_offset,
			&host_next_offset,
			&host_memory_type_bits);
	}

	// allocate device memory for all the buffers
	uint32_t const device_memory_type_index = imdd_vulkan_get_memory_type_index(
		&physical_device_memory_properties,
		device_memory_type_bits,
		VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
	VkMemoryAllocateInfo device_memory_allocate_info;
	IMDD_VULKAN_SET_ZERO(device_memory_allocate_info);
	device_memory_allocate_info.sType			= VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
	device_memory_allocate_info.allocationSize	= device_next_offset;
	device_memory_allocate_info.memoryTypeIndex	= device_memory_type_index;
	imdd_vulkan_verify(ctx, ctx->fp.vkAllocateMemory(
		device,
		&device_memory_allocate_info,
		NULL,
		&ctx->device_memory));

	uint32_t const host_memory_type_index = imdd_vulkan_get_memory_type_index(
		&physical_device_memory_properties,
		host_memory_type_bits,
		VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT);
	VkMemoryAllocateInfo host_memory_allocate_info;
	IMDD_VULKAN_SET_ZERO(host_memory_allocate_info);
	host_memory_allocate_info.sType				= VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
	host_memory_allocate_info.allocationSize	= host_next_offset;
	host_memory_allocate_info.memoryTypeIndex	= host_memory_type_index;
	imdd_vulkan_verify(ctx, ctx->fp.vkAllocateMemory(
		device,
		&host_memory_allocate_info,
		NULL,
		&ctx->host_memory));

	// keep a mapping open to host memory
	imdd_vulkan_verify(ctx, ctx->fp.vkMapMemory(
		device,
		ctx->host_memory,
		0,
		VK_WHOLE_SIZE,
		0,
		&ctx->host_memory_base));

	// map objects into this device memory
	for (imdd_style_enum_t style = (imdd_style_enum_t)0; style < IMDD_STYLE_COUNT; style = (imdd_style_enum_t)(1 + style)) {
		imdd_vulkan_mesh_buffer_t *const mesh_buffer = &ctx->mesh_buffers[style];

		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			mesh_buffer->vertex_staging_buffer,
			ctx->host_memory,
			mesh_buffer->vertex_staging_offset));
		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			mesh_buffer->index_staging_buffer,
			ctx->host_memory,
			mesh_buffer->index_staging_offset));

		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			mesh_buffer->vertex_buffer,
			ctx->device_memory,
			mesh_buffer->vertex_offset));
		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			mesh_buffer->index_buffer,
			ctx->device_memory,
			mesh_buffer->index_offset));

		imdd_mesh_layout_write(
			&mesh_buffer->layout,
			(void *)((uintptr_t)ctx->host_memory_base + mesh_buffer->vertex_staging_offset),
			(uint16_t *)((uintptr_t)ctx->host_memory_base + mesh_buffer->index_staging_offset));

		VkMappedMemoryRange memory_ranges[2];
		IMDD_VULKAN_SET_ZERO(memory_ranges);
		memory_ranges[0].sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
		memory_ranges[0].memory = ctx->host_memory;
		memory_ranges[0].offset = mesh_buffer->vertex_staging_offset;
		memory_ranges[0].size = imdd_vulkan_align(mesh_buffer->vertex_buffer_size, ctx->atom_size);
		memory_ranges[1].sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
		memory_ranges[1].memory = ctx->host_memory;
		memory_ranges[1].offset = mesh_buffer->index_staging_offset;
		memory_ranges[1].size = imdd_vulkan_align(mesh_buffer->index_buffer_size, ctx->atom_size);
		imdd_vulkan_verify(ctx, ctx->fp.vkFlushMappedMemoryRanges(device, 2, memory_ranges));
	}
	for (uint32_t frame_index = 0; frame_index < IMDD_VULKAN_FRAME_COUNT; ++frame_index) {
		imdd_vulkan_frame_t *const frame = &ctx->frames[frame_index];
		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			frame->instance_transform_buffer,
			ctx->host_memory,
			frame->instance_transform_offset));
		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			frame->instance_color_buffer,
			ctx->host_memory,
			frame->instance_color_offset));
		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			frame->filled_vertex_buffer,
			ctx->host_memory,
			frame->filled_vertex_offset));
		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			frame->wire_vertex_buffer,
			ctx->host_memory,
			frame->wire_vertex_offset));
		frame->instance_transform_base = (imdd_instance_transform_t *)((uintptr_t)ctx->host_memory_base + frame->instance_transform_offset);
		frame->instance_color_base = (imdd_instance_color_t *)((uintptr_t)ctx->host_memory_base + frame->instance_color_offset);
		frame->filled_vertex_base = (imdd_array_filled_vertex_t *)((uintptr_t)ctx->host_memory_base + frame->filled_vertex_offset);
		frame->wire_vertex_base = (imdd_array_wire_vertex_t *)((uintptr_t)ctx->host_memory_base + frame->wire_vertex_offset);
	}
	for (uint32_t descriptor_index = 0; descriptor_index < IMDD_VULKAN_DESCRIPTOR_COUNT; ++descriptor_index) {
		imdd_vulkan_descriptor_t *const desc = &ctx->descriptors[descriptor_index];
		imdd_vulkan_verify(ctx, ctx->fp.vkBindBufferMemory(
			device,
			desc->common_uniform_buffer,
			ctx->host_memory,
			desc->common_uniform_offset));
		desc->common_uniform_base = (void *)((uintptr_t)ctx->host_memory_base + desc->common_uniform_offset);
	}

	// write per-frame descriptor sets now
	for (uint32_t descriptor_index = 0; descriptor_index < IMDD_VULKAN_DESCRIPTOR_COUNT; ++descriptor_index) {
		imdd_vulkan_descriptor_t *const desc = &ctx->descriptors[descriptor_index];

		VkDescriptorSetAllocateInfo descriptor_set_allocate_info;
		IMDD_VULKAN_SET_ZERO(descriptor_set_allocate_info);
		descriptor_set_allocate_info.sType				= VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
		descriptor_set_allocate_info.descriptorPool		= ctx->descriptor_pool;
		descriptor_set_allocate_info.descriptorSetCount	= 1;
		descriptor_set_allocate_info.pSetLayouts		= &ctx->common_descriptor_set_layout;
		imdd_vulkan_verify(ctx, ctx->fp.vkAllocateDescriptorSets(
			device,
			&descriptor_set_allocate_info,
			&desc->common_descriptor_set));

		VkDescriptorBufferInfo descriptor_buffer_info;
		IMDD_VULKAN_SET_ZERO(descriptor_buffer_info);
		descriptor_buffer_info.buffer = desc->common_uniform_buffer;
		descriptor_buffer_info.range = uniform_size_per_draw;

		VkWriteDescriptorSet write_descriptor_set;
		IMDD_VULKAN_SET_ZERO(write_descriptor_set);
		write_descriptor_set.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
		write_descriptor_set.dstSet = desc->common_descriptor_set;
		write_descriptor_set.descriptorCount = 1;
		write_descriptor_set.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
		write_descriptor_set.pBufferInfo = &descriptor_buffer_info;

		ctx->fp.vkUpdateDescriptorSets(device, 1, &write_descriptor_set, 0, NULL);
	}
}

void imdd_vulkan_create_pipelines(
	imdd_vulkan_context_t *ctx,
	VkDevice device,
	VkRenderPass render_pass,
	VkSampleCountFlagBits rasterization_samples)
{
	for (imdd_vulkan_draw_type_enum_t draw_type = (imdd_vulkan_draw_type_enum_t)0; draw_type < IMDD_VULKAN_DRAW_TYPE_COUNT; draw_type = (imdd_vulkan_draw_type_enum_t)(draw_type + 1))
	for (imdd_style_enum_t style = (imdd_style_enum_t)0; style < IMDD_STYLE_COUNT; style = (imdd_style_enum_t)(style + 1))
	for (imdd_blend_enum_t blend = (imdd_blend_enum_t)0; blend < IMDD_BLEND_COUNT; blend = (imdd_blend_enum_t)(blend + 1))
	for (imdd_zmode_enum_t zmode = (imdd_zmode_enum_t)0; zmode < IMDD_ZMODE_COUNT; zmode = (imdd_zmode_enum_t)(zmode + 1)) {
		uint32_t const pipeline_index = imdd_vulkan_pipeline_index(draw_type, style, blend, zmode);

		VkPipelineShaderStageCreateInfo shader_stage_create_info[2];
		IMDD_VULKAN_SET_ZERO(shader_stage_create_info);
		shader_stage_create_info[0].sType	= VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
		shader_stage_create_info[0].stage	= VK_SHADER_STAGE_VERTEX_BIT;
		shader_stage_create_info[0].pName	= "main";
		shader_stage_create_info[1].sType	= VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
		shader_stage_create_info[1].stage	= VK_SHADER_STAGE_FRAGMENT_BIT;
		shader_stage_create_info[1].pName	= "main";
		if (style == IMDD_STYLE_FILLED) {
			if (draw_type == IMDD_VULKAN_DRAW_TYPE_INSTANCE) {
				shader_stage_create_info[0].module	= ctx->instance_filled_vert;
			} else {
				shader_stage_create_info[0].module	= ctx->array_filled_vert;
			}
			shader_stage_create_info[1].module	= ctx->filled_frag;
		} else {
			if (draw_type == IMDD_VULKAN_DRAW_TYPE_INSTANCE) {
				shader_stage_create_info[0].module	= ctx->instance_wire_vert;
			} else {
				shader_stage_create_info[0].module	= ctx->array_wire_vert;
			}
			shader_stage_create_info[1].module	= ctx->wire_frag;
		}

		VkVertexInputBindingDescription binding_descriptions[3];
		IMDD_VULKAN_SET_ZERO(binding_descriptions);
		uint32_t binding_description_count = 0;
		if (draw_type == IMDD_VULKAN_DRAW_TYPE_INSTANCE) {
			binding_descriptions[0].stride		= sizeof(imdd_instance_transform_t);
			binding_descriptions[0].inputRate	= VK_VERTEX_INPUT_RATE_INSTANCE;
			binding_descriptions[1].binding		= 1;
			binding_descriptions[1].stride		= sizeof(imdd_instance_color_t);
			binding_descriptions[1].inputRate	= VK_VERTEX_INPUT_RATE_INSTANCE;
			binding_descriptions[2].binding		= 2;
			binding_descriptions[2].stride		= (style == IMDD_STYLE_FILLED) ? sizeof(imdd_mesh_filled_vertex_t) : sizeof(imdd_mesh_wire_vertex_t);
			binding_descriptions[2].inputRate	= VK_VERTEX_INPUT_RATE_VERTEX;
			binding_description_count = 3;
		} else {
			binding_descriptions[0].stride		= (style == IMDD_STYLE_FILLED) ? sizeof(imdd_array_filled_vertex_t) : sizeof(imdd_array_wire_vertex_t);
			binding_descriptions[0].inputRate	= VK_VERTEX_INPUT_RATE_VERTEX;
			binding_description_count = 1;
		}

		VkVertexInputAttributeDescription attribute_descriptions[6];
		IMDD_VULKAN_SET_ZERO(attribute_descriptions);
		uint32_t attribute_description_count = 0;
		if (draw_type == IMDD_VULKAN_DRAW_TYPE_INSTANCE) {
			attribute_descriptions[attribute_description_count].location	= 0;
			attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R32G32B32A32_SFLOAT;
			attribute_descriptions[attribute_description_count].offset		= (uint32_t)offsetof(imdd_instance_transform_t, row0);
			++attribute_description_count;
			attribute_descriptions[attribute_description_count].location	= 1;
			attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R32G32B32A32_SFLOAT;
			attribute_descriptions[attribute_description_count].offset		= (uint32_t)offsetof(imdd_instance_transform_t, row1);
			++attribute_description_count;
			attribute_descriptions[attribute_description_count].location	= 2;
			attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R32G32B32A32_SFLOAT;
			attribute_descriptions[attribute_description_count].offset		= (uint32_t)offsetof(imdd_instance_transform_t, row2);
			++attribute_description_count;
			attribute_descriptions[attribute_description_count].location	= 3;
			attribute_descriptions[attribute_description_count].binding		= 1;
			attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R8G8B8A8_UNORM;
			attribute_descriptions[attribute_description_count].offset		= 0;	// col
			++attribute_description_count;
			attribute_descriptions[attribute_description_count].location	= 4;
			attribute_descriptions[attribute_description_count].binding		= 2;
			attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R32G32B32_SFLOAT;
			attribute_descriptions[attribute_description_count].offset		= 0;	// pos
			++attribute_description_count;
			if (style == IMDD_STYLE_FILLED) {
				attribute_descriptions[attribute_description_count].location	= 5;
				attribute_descriptions[attribute_description_count].binding		= 2;
				attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R32G32B32_SFLOAT;
				attribute_descriptions[attribute_description_count].offset		= (uint32_t)offsetof(imdd_mesh_filled_vertex_t, normal);
				++attribute_description_count;
			}
		} else {
			attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R32G32B32_SFLOAT;
			++attribute_description_count;
			attribute_descriptions[attribute_description_count].location	= 1;
			attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R8G8B8A8_UNORM;
			attribute_descriptions[attribute_description_count].offset		= 12;
			++attribute_description_count;
			if (style == IMDD_STYLE_FILLED) {
				attribute_descriptions[attribute_description_count].location	= 2;
				attribute_descriptions[attribute_description_count].format		= VK_FORMAT_R32G32B32_SFLOAT;
				attribute_descriptions[attribute_description_count].offset		= offsetof(imdd_array_filled_vertex_t, normal_pad);
				++attribute_description_count;
			}
		}

		VkPipelineVertexInputStateCreateInfo vertex_input_state_create_info;
		IMDD_VULKAN_SET_ZERO(vertex_input_state_create_info);
		vertex_input_state_create_info.sType							= VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
		vertex_input_state_create_info.vertexBindingDescriptionCount	= binding_description_count;
		vertex_input_state_create_info.pVertexBindingDescriptions		= binding_descriptions;
		vertex_input_state_create_info.vertexAttributeDescriptionCount	= attribute_description_count;
		vertex_input_state_create_info.pVertexAttributeDescriptions		= attribute_descriptions;

		VkPipelineInputAssemblyStateCreateInfo input_assembly_state_create_info;
		IMDD_VULKAN_SET_ZERO(input_assembly_state_create_info);
		input_assembly_state_create_info.sType			= VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
		if (style == IMDD_STYLE_WIRE) {
			input_assembly_state_create_info.topology	= VK_PRIMITIVE_TOPOLOGY_LINE_LIST;
		} else {
			input_assembly_state_create_info.topology	= VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
		}

		VkPipelineViewportStateCreateInfo viewport_state_create_info;
		IMDD_VULKAN_SET_ZERO(viewport_state_create_info);
		viewport_state_create_info.sType			= VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
		viewport_state_create_info.viewportCount	= 1;
		viewport_state_create_info.pViewports		= NULL;
		viewport_state_create_info.scissorCount		= 1;
		viewport_state_create_info.pScissors		= NULL;

		VkPipelineRasterizationStateCreateInfo rasterization_state_create_info;
		IMDD_VULKAN_SET_ZERO(rasterization_state_create_info);
		rasterization_state_create_info.sType			= VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
		rasterization_state_create_info.polygonMode		= VK_POLYGON_MODE_FILL;
		rasterization_state_create_info.cullMode		= (draw_type == IMDD_VULKAN_DRAW_TYPE_INSTANCE) ? VK_CULL_MODE_BACK_BIT : VK_CULL_MODE_NONE;
		rasterization_state_create_info.lineWidth		= 1.f;

		VkPipelineMultisampleStateCreateInfo multisample_state_create_info;
		IMDD_VULKAN_SET_ZERO(multisample_state_create_info);
		multisample_state_create_info.sType					= VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
		multisample_state_create_info.rasterizationSamples	= rasterization_samples;

		VkPipelineDepthStencilStateCreateInfo depth_stencil_state_create_info;
		IMDD_VULKAN_SET_ZERO(depth_stencil_state_create_info);
		depth_stencil_state_create_info.sType				= VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
		depth_stencil_state_create_info.depthTestEnable		= (zmode == IMDD_ZMODE_TEST) ? VK_TRUE : VK_FALSE;
		depth_stencil_state_create_info.depthWriteEnable	= (zmode == IMDD_ZMODE_TEST && blend == IMDD_BLEND_OPAQUE) ? VK_TRUE : VK_FALSE;
		depth_stencil_state_create_info.depthCompareOp		= VK_COMPARE_OP_LESS_OR_EQUAL;

		VkPipelineColorBlendAttachmentState color_blend_attachment_state;
		IMDD_VULKAN_SET_ZERO(color_blend_attachment_state);
		color_blend_attachment_state.colorWriteMask = VK_COLOR_COMPONENT_R_BIT
													| VK_COLOR_COMPONENT_G_BIT
													| VK_COLOR_COMPONENT_B_BIT
													| VK_COLOR_COMPONENT_A_BIT;
		if (blend == IMDD_BLEND_ALPHA) {
			color_blend_attachment_state.blendEnable			= VK_TRUE;
			color_blend_attachment_state.srcColorBlendFactor	= VK_BLEND_FACTOR_SRC_ALPHA;
			color_blend_attachment_state.dstColorBlendFactor	= VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
			color_blend_attachment_state.colorBlendOp			= VK_BLEND_OP_ADD;
			color_blend_attachment_state.srcAlphaBlendFactor	= VK_BLEND_FACTOR_SRC_ALPHA;
			color_blend_attachment_state.dstAlphaBlendFactor	= VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
			color_blend_attachment_state.alphaBlendOp			= VK_BLEND_OP_ADD;
		}

		VkPipelineColorBlendStateCreateInfo color_blend_state_create_info;
		IMDD_VULKAN_SET_ZERO(color_blend_state_create_info);
		color_blend_state_create_info.sType				= VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
		color_blend_state_create_info.attachmentCount	= 1;
		color_blend_state_create_info.pAttachments		= &color_blend_attachment_state;

		VkDynamicState const dynamic_states[2] = {
			VK_DYNAMIC_STATE_VIEWPORT,
			VK_DYNAMIC_STATE_SCISSOR
		};

		VkPipelineDynamicStateCreateInfo dynamic_state_create_info;
		IMDD_VULKAN_SET_ZERO(dynamic_state_create_info);
		dynamic_state_create_info.sType					= VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
		dynamic_state_create_info.dynamicStateCount		= 2;
		dynamic_state_create_info.pDynamicStates		= dynamic_states;

		VkGraphicsPipelineCreateInfo pipeline_create_info;
		IMDD_VULKAN_SET_ZERO(pipeline_create_info);
		pipeline_create_info.sType					= VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
		pipeline_create_info.stageCount				= 2;
		pipeline_create_info.pStages				= shader_stage_create_info;
		pipeline_create_info.pVertexInputState		= &vertex_input_state_create_info;
		pipeline_create_info.pInputAssemblyState	= &input_assembly_state_create_info;
		pipeline_create_info.pViewportState			= &viewport_state_create_info;
		pipeline_create_info.pRasterizationState	= &rasterization_state_create_info;
		pipeline_create_info.pMultisampleState		= &multisample_state_create_info;
		pipeline_create_info.pDepthStencilState		= &depth_stencil_state_create_info;
		pipeline_create_info.pColorBlendState		= &color_blend_state_create_info;
		pipeline_create_info.pDynamicState			= &dynamic_state_create_info;
		pipeline_create_info.layout					= ctx->common_pipeline_layout;
		pipeline_create_info.renderPass				= render_pass;

		imdd_vulkan_verify(ctx, ctx->fp.vkCreateGraphicsPipelines(
			device,
			VK_NULL_HANDLE,
			1,
			&pipeline_create_info,
			NULL,
			&ctx->pipelines[pipeline_index]));
	}
}

void imdd_vulkan_update(
	imdd_vulkan_context_t *ctx,
	imdd_shape_store_t const *const *stores,
	uint32_t store_count,
	VkDevice device,
	VkCommandBuffer command_buffer)
{
	// copy mesh data if not yet copied
	if (!ctx->mesh_copy_done) {
		VkBufferMemoryBarrier buffer_memory_barriers[2*IMDD_STYLE_COUNT];
		IMDD_VULKAN_SET_ZERO(buffer_memory_barriers);
		uint32_t buffer_memory_barrier_count = 0;

		for (imdd_style_enum_t style = (imdd_style_enum_t)0; style < IMDD_STYLE_COUNT; style = (imdd_style_enum_t)(1 + style)) {
			imdd_vulkan_mesh_buffer_t *const mesh_buffer = &ctx->mesh_buffers[style];

			VkBufferMemoryBarrier *const vertex_barrier = &buffer_memory_barriers[buffer_memory_barrier_count + 0];
			VkBufferMemoryBarrier *const index_barrier = &buffer_memory_barriers[buffer_memory_barrier_count + 1];
			buffer_memory_barrier_count += 2;

			VkBufferCopy vertex_buffer_copy;
			IMDD_VULKAN_SET_ZERO(vertex_buffer_copy);
			vertex_buffer_copy.srcOffset = 0;
			vertex_buffer_copy.dstOffset = 0;
			vertex_buffer_copy.size = mesh_buffer->vertex_buffer_size;
			ctx->fp.vkCmdCopyBuffer(
				command_buffer,
				mesh_buffer->vertex_staging_buffer,
				mesh_buffer->vertex_buffer,
				1,
				&vertex_buffer_copy);

			vertex_barrier->sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
			vertex_barrier->srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
			vertex_barrier->dstAccessMask = VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT;
			vertex_barrier->srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
			vertex_barrier->dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
			vertex_barrier->buffer = mesh_buffer->vertex_buffer;
			vertex_barrier->size = VK_WHOLE_SIZE;

			VkBufferCopy index_buffer_copy;
			IMDD_VULKAN_SET_ZERO(index_buffer_copy);
			index_buffer_copy.srcOffset = 0;
			index_buffer_copy.dstOffset = 0;
			index_buffer_copy.size = mesh_buffer->index_buffer_size;
			ctx->fp.vkCmdCopyBuffer(
				command_buffer,
				mesh_buffer->index_staging_buffer,
				mesh_buffer->index_buffer,
				1,
				&index_buffer_copy);

			index_barrier->sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
			index_barrier->srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;
			index_barrier->dstAccessMask = VK_ACCESS_INDEX_READ_BIT;
			index_barrier->srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
			index_barrier->dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;
			index_barrier->buffer = mesh_buffer->index_buffer;
			index_barrier->size = VK_WHOLE_SIZE;
		}

		ctx->fp.vkCmdPipelineBarrier(
			command_buffer,
			VK_ACCESS_TRANSFER_WRITE_BIT,
			VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT | VK_ACCESS_INDEX_READ_BIT,
			0,
			0, NULL,
			buffer_memory_barrier_count, buffer_memory_barriers,
			0, NULL);

		ctx->mesh_copy_done = 1;
	}

	// advance to next frame
	ctx->frame_index = (1 + ctx->frame_index) % IMDD_VULKAN_FRAME_COUNT;
	imdd_vulkan_frame_t const *const frame = &ctx->frames[ctx->frame_index];

	// partition our memory between shapes based on usage, emit all the shapes into it
	uint32_t instance_count = 0;
	uint32_t filled_vertex_count = 0;
	uint32_t wire_vertex_count = 0;
	imdd_emit_shapes(
		stores,
		store_count,
		frame->instance_transform_base,
		frame->instance_color_base,
		ctx->instance_capacity,
		ctx->instance_batches,
		&instance_count,
		frame->filled_vertex_base,
		ctx->filled_vertex_capacity,
		ctx->filled_array_batches,
		&filled_vertex_count,
		frame->wire_vertex_base,
		ctx->wire_vertex_capacity,
		ctx->wire_array_batches,
		&wire_vertex_count);

	// flush these writes
	VkMappedMemoryRange memory_ranges[4];
	IMDD_VULKAN_SET_ZERO(memory_ranges);
	uint32_t memory_range_count = 0;
	if (instance_count > 0) {
		VkMappedMemoryRange *const transform_range = &memory_ranges[memory_range_count];
		transform_range->sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
		transform_range->memory = ctx->host_memory;
		transform_range->offset = frame->instance_transform_offset;
		transform_range->size = imdd_vulkan_align(instance_count*sizeof(imdd_instance_transform_t), ctx->atom_size);
		++memory_range_count;

		VkMappedMemoryRange *const color_range = &memory_ranges[memory_range_count];
		color_range->sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
		color_range->memory = ctx->host_memory;
		color_range->offset = frame->instance_color_offset;
		color_range->size = imdd_vulkan_align(instance_count*sizeof(imdd_instance_color_t), ctx->atom_size);
	}
	if (filled_vertex_count > 0) {
		VkMappedMemoryRange *const range = &memory_ranges[memory_range_count];
		range->sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
		range->memory = ctx->host_memory;
		range->offset = frame->filled_vertex_offset;
		range->size = imdd_vulkan_align(filled_vertex_count*sizeof(imdd_array_filled_vertex_t), ctx->atom_size);
		++memory_range_count;
	}
	if (wire_vertex_count > 0) {
		VkMappedMemoryRange *const range = &memory_ranges[memory_range_count];
		range->sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
		range->memory = ctx->host_memory;
		range->offset = frame->wire_vertex_offset;
		range->size = imdd_vulkan_align(wire_vertex_count*sizeof(imdd_array_wire_vertex_t), ctx->atom_size);
		++memory_range_count;
	}
	imdd_vulkan_verify(ctx, ctx->fp.vkFlushMappedMemoryRanges(device, memory_range_count, memory_ranges));
}

static
void imdd_vulkan_draw_instances(
	imdd_vulkan_context_t const *ctx,
	VkCommandBuffer command_buffer,
	imdd_style_enum_t style,
	imdd_blend_enum_t blend,
	imdd_zmode_enum_t zmode)
{
	imdd_vulkan_frame_t const *const frame = &ctx->frames[ctx->frame_index];
	imdd_vulkan_draw_type_enum_t const draw_type = IMDD_VULKAN_DRAW_TYPE_INSTANCE;

	imdd_vulkan_mesh_buffer_t const *const mesh_buffer = &ctx->mesh_buffers[style];
	VkBuffer vertex_buffers[3];
	vertex_buffers[0] = frame->instance_transform_buffer;
	vertex_buffers[1] = frame->instance_color_buffer;
	vertex_buffers[2] = mesh_buffer->vertex_buffer;
	VkDeviceSize const zero_offsets[3] = { 0, 0, 0 };
	ctx->fp.vkCmdBindVertexBuffers(command_buffer, 0, 3, vertex_buffers, zero_offsets);
	ctx->fp.vkCmdBindIndexBuffer(command_buffer, mesh_buffer->index_buffer, 0, VK_INDEX_TYPE_UINT16);

	for (imdd_mesh_enum_t mesh = (imdd_mesh_enum_t)0; mesh < IMDD_MESH_COUNT; mesh = (imdd_mesh_enum_t)(mesh + 1)) {
		uint32_t const batch_index = imdd_instance_batch_index(mesh, style, blend, zmode);
		imdd_batch_t const *const batch = &ctx->instance_batches[batch_index];
		if (batch->count) {
			imdd_mesh_desc_t const *const mesh_desc = &mesh_buffer->layout.mesh_desc[mesh];
			imdd_mesh_offsets_t const *const mesh_offsets = &mesh_buffer->layout.mesh_offsets[mesh];

			uint32_t const pipeline_index = imdd_vulkan_pipeline_index(draw_type, style, blend, zmode);
			ctx->fp.vkCmdBindPipeline(command_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, ctx->pipelines[pipeline_index]);

			ctx->fp.vkCmdDrawIndexed(command_buffer, mesh_desc->index_count, batch->count, mesh_offsets->index_offset, 0, batch->offset);
		}
	}
}

static
void imdd_vulkan_draw_filled_arrays(
	imdd_vulkan_context_t const *ctx,
	VkCommandBuffer command_buffer,
	imdd_blend_enum_t blend,
	imdd_zmode_enum_t zmode)
{
	imdd_vulkan_frame_t const *const frame = &ctx->frames[ctx->frame_index];
	imdd_vulkan_draw_type_enum_t const draw_type = IMDD_VULKAN_DRAW_TYPE_ARRAY;
	imdd_style_enum_t const style = IMDD_STYLE_FILLED;

	uint32_t const batch_index = imdd_array_batch_index(blend, zmode);
	imdd_batch_t const *const batch = &ctx->filled_array_batches[batch_index];
	if (batch->count) {
		uint32_t const pipeline_index = imdd_vulkan_pipeline_index(draw_type, style, blend, zmode);
		ctx->fp.vkCmdBindPipeline(command_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, ctx->pipelines[pipeline_index]);

		VkDeviceSize const zero_offset = 0;
		ctx->fp.vkCmdBindVertexBuffers(command_buffer, 0, 1, &frame->filled_vertex_buffer, &zero_offset);

		ctx->fp.vkCmdDraw(command_buffer, batch->count, 1, batch->offset, 0);
	}
}

static
void imdd_vulkan_draw_wire_arrays(
	imdd_vulkan_context_t const *ctx,
	VkCommandBuffer command_buffer,
	imdd_blend_enum_t blend,
	imdd_zmode_enum_t zmode)
{
	imdd_vulkan_frame_t const *const frame = &ctx->frames[ctx->frame_index];
	imdd_vulkan_draw_type_enum_t const draw_type = IMDD_VULKAN_DRAW_TYPE_ARRAY;
	imdd_style_enum_t const style = IMDD_STYLE_WIRE;

	uint32_t const batch_index = imdd_array_batch_index(blend, zmode);
	imdd_batch_t const *const batch = &ctx->wire_array_batches[batch_index];
	if (batch->count) {
		uint32_t const pipeline_index = imdd_vulkan_pipeline_index(draw_type, style, blend, zmode);
		ctx->fp.vkCmdBindPipeline(command_buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, ctx->pipelines[pipeline_index]);

		VkDeviceSize const zero_offset = 0;
		ctx->fp.vkCmdBindVertexBuffers(command_buffer, 0, 1, &frame->wire_vertex_buffer, &zero_offset);

		ctx->fp.vkCmdDraw(command_buffer, batch->count, 1, batch->offset, 0);
	}
}

void imdd_vulkan_draw(
	imdd_vulkan_context_t *ctx,
	float const *proj_from_world,
	VkDevice device,
	VkCommandBuffer command_buffer)
{
	// advance to next draw
	ctx->descriptor_index = (1 + ctx->descriptor_index) % IMDD_VULKAN_DESCRIPTOR_COUNT;
	imdd_vulkan_descriptor_t const *const desc = &ctx->descriptors[ctx->descriptor_index];

	// write uniform data
	uint32_t const uniform_size_per_draw = ((ctx->flags & IMDD_VULKAN_FLAG_MULTIVIEW) ? 2 : 1)*16*sizeof(float);
	memcpy(desc->common_uniform_base, proj_from_world, uniform_size_per_draw);

	// flush this write
	VkMappedMemoryRange memory_range;
	IMDD_VULKAN_SET_ZERO(memory_range);
	memory_range.sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
	memory_range.memory = ctx->host_memory;
	memory_range.offset = desc->common_uniform_offset;
	memory_range.size = imdd_vulkan_align(uniform_size_per_draw, ctx->atom_size);
	imdd_vulkan_verify(ctx, ctx->fp.vkFlushMappedMemoryRanges(device, 1, &memory_range));

	// bind descriptor set that is shared by all pipelines
	ctx->fp.vkCmdBindDescriptorSets(
		command_buffer,
		VK_PIPELINE_BIND_POINT_GRAPHICS,
		ctx->common_pipeline_layout,
		0,
		1, &desc->common_descriptor_set,
		0, NULL);

	// emit all draw calls
	for (imdd_zmode_enum_t zmode = (imdd_zmode_enum_t)0; zmode < IMDD_ZMODE_COUNT; zmode = (imdd_zmode_enum_t)(zmode + 1))
	for (imdd_blend_enum_t blend = (imdd_blend_enum_t)0; blend < IMDD_BLEND_COUNT; blend = (imdd_blend_enum_t)(blend + 1))
	for (imdd_style_enum_t style = (imdd_style_enum_t)0; style < IMDD_STYLE_COUNT; style = (imdd_style_enum_t)(style + 1)) {
		imdd_vulkan_draw_instances(ctx, command_buffer, style, blend, zmode);
		if (style == IMDD_STYLE_FILLED) {
			imdd_vulkan_draw_filled_arrays(ctx, command_buffer, blend, zmode);
		} else {
			imdd_vulkan_draw_wire_arrays(ctx, command_buffer, blend, zmode);
		}
	}
}

#ifdef __cplusplus
} // extern "C"
#endif
